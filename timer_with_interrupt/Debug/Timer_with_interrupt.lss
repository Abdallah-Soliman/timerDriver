
Timer_with_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bb8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000f  00800060  00800060  00000c2c  2**0
                  ALLOC
  2 .stab         00000fe4  00000000  00000000  00000c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000007ea  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__vector_10>
  2c:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	af 36       	cpi	r26, 0x6F	; 111
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "GIE_interface.h"
void SW_PWM_Gneration(void);


void main ()
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	  /*some peripheral initialization  */

	DIO_SetPinDirection(PORTB , PIN4 , OUTPUT);
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	64 e0       	ldi	r22, 0x04	; 4
  88:	41 e0       	ldi	r20, 0x01	; 1
  8a:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_SetPinDirection>

	DIO_SetPinValue(PORTB,PIN4,HIGH);
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	64 e0       	ldi	r22, 0x04	; 4
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_SetPinValue>

	timer_callback(SW_PWM_Gneration);
  98:	88 e5       	ldi	r24, 0x58	; 88
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <timer_callback>

	GIE_voidEnable();
  a0:	0e 94 cd 04 	call	0x99a	; 0x99a <GIE_voidEnable>

	Timer0_Voidint();
  a4:	0e 94 09 05 	call	0xa12	; 0xa12 <Timer0_Voidint>
	/*preload value for 300ms*/
	Pre_Load_Value(230);
  a8:	86 ee       	ldi	r24, 0xE6	; 230
  aa:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <Pre_Load_Value>
  ae:	ff cf       	rjmp	.-2      	; 0xae <main+0x32>

000000b0 <SW_PWM_Gneration>:


          /*call back function */
         /*300m on 500m off */
void SW_PWM_Gneration(void)
{
  b0:	df 93       	push	r29
  b2:	cf 93       	push	r28
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
	static uint8_t counter=0;
	 counter++;
  b8:	80 91 60 00 	lds	r24, 0x0060
  bc:	8f 5f       	subi	r24, 0xFF	; 255
  be:	80 93 60 00 	sts	0x0060, r24
     if(counter == 10)
  c2:	80 91 60 00 	lds	r24, 0x0060
  c6:	8a 30       	cpi	r24, 0x0A	; 10
  c8:	49 f4       	brne	.+18     	; 0xdc <SW_PWM_Gneration+0x2c>
     {
    	 DIO_SetPinValue(PORTB,PIN4,LOW);
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	64 e0       	ldi	r22, 0x04	; 4
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_SetPinValue>
    	 Pre_Load_Value(204);
  d4:	8c ec       	ldi	r24, 0xCC	; 204
  d6:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <Pre_Load_Value>
  da:	0e c0       	rjmp	.+28     	; 0xf8 <SW_PWM_Gneration+0x48>
     }
     else if(counter == 26)
  dc:	80 91 60 00 	lds	r24, 0x0060
  e0:	8a 31       	cpi	r24, 0x1A	; 26
  e2:	51 f4       	brne	.+20     	; 0xf8 <SW_PWM_Gneration+0x48>
     {
    	 DIO_SetPinValue(PORTB,PIN4,HIGH);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	64 e0       	ldi	r22, 0x04	; 4
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_SetPinValue>
    	 Pre_Load_Value(230);
  ee:	86 ee       	ldi	r24, 0xE6	; 230
  f0:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <Pre_Load_Value>
    	 counter=0;
  f4:	10 92 60 00 	sts	0x0060, r1
     }

}
  f8:	cf 91       	pop	r28
  fa:	df 91       	pop	r29
  fc:	08 95       	ret

000000fe <DIO_SetPinDirection>:

#include "DIO_private.h"
#include "DIO_private.h"
#include "DIO_Error_state.h"
uint8_t DIO_SetPinDirection(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_DIRECTION)
{
  fe:	df 93       	push	r29
 100:	cf 93       	push	r28
 102:	00 d0       	rcall	.+0      	; 0x104 <DIO_SetPinDirection+0x6>
 104:	00 d0       	rcall	.+0      	; 0x106 <DIO_SetPinDirection+0x8>
 106:	00 d0       	rcall	.+0      	; 0x108 <DIO_SetPinDirection+0xa>
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
 10c:	8a 83       	std	Y+2, r24	; 0x02
 10e:	6b 83       	std	Y+3, r22	; 0x03
 110:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t au8_errorstate = DIO_SUCCESS ;
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	89 83       	std	Y+1, r24	; 0x01
	switch (au8_PORT)
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	28 2f       	mov	r18, r24
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	3e 83       	std	Y+6, r19	; 0x06
 11e:	2d 83       	std	Y+5, r18	; 0x05
 120:	8d 81       	ldd	r24, Y+5	; 0x05
 122:	9e 81       	ldd	r25, Y+6	; 0x06
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	91 05       	cpc	r25, r1
 128:	09 f4       	brne	.+2      	; 0x12c <DIO_SetPinDirection+0x2e>
 12a:	47 c0       	rjmp	.+142    	; 0x1ba <DIO_SetPinDirection+0xbc>
 12c:	2d 81       	ldd	r18, Y+5	; 0x05
 12e:	3e 81       	ldd	r19, Y+6	; 0x06
 130:	22 30       	cpi	r18, 0x02	; 2
 132:	31 05       	cpc	r19, r1
 134:	2c f4       	brge	.+10     	; 0x140 <DIO_SetPinDirection+0x42>
 136:	8d 81       	ldd	r24, Y+5	; 0x05
 138:	9e 81       	ldd	r25, Y+6	; 0x06
 13a:	00 97       	sbiw	r24, 0x00	; 0
 13c:	71 f0       	breq	.+28     	; 0x15a <DIO_SetPinDirection+0x5c>
 13e:	cc c0       	rjmp	.+408    	; 0x2d8 <DIO_SetPinDirection+0x1da>
 140:	2d 81       	ldd	r18, Y+5	; 0x05
 142:	3e 81       	ldd	r19, Y+6	; 0x06
 144:	22 30       	cpi	r18, 0x02	; 2
 146:	31 05       	cpc	r19, r1
 148:	09 f4       	brne	.+2      	; 0x14c <DIO_SetPinDirection+0x4e>
 14a:	67 c0       	rjmp	.+206    	; 0x21a <DIO_SetPinDirection+0x11c>
 14c:	8d 81       	ldd	r24, Y+5	; 0x05
 14e:	9e 81       	ldd	r25, Y+6	; 0x06
 150:	83 30       	cpi	r24, 0x03	; 3
 152:	91 05       	cpc	r25, r1
 154:	09 f4       	brne	.+2      	; 0x158 <DIO_SetPinDirection+0x5a>
 156:	91 c0       	rjmp	.+290    	; 0x27a <DIO_SetPinDirection+0x17c>
 158:	bf c0       	rjmp	.+382    	; 0x2d8 <DIO_SetPinDirection+0x1da>
	{
		case PORTA: if (au8_DIRECTION==INPUT)
 15a:	8c 81       	ldd	r24, Y+4	; 0x04
 15c:	88 23       	and	r24, r24
 15e:	a9 f4       	brne	.+42     	; 0x18a <DIO_SetPinDirection+0x8c>
					{
						CLR_BIT(DDRA_REG,au8_PIN);
 160:	aa e3       	ldi	r26, 0x3A	; 58
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	ea e3       	ldi	r30, 0x3A	; 58
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	48 2f       	mov	r20, r24
 16c:	8b 81       	ldd	r24, Y+3	; 0x03
 16e:	28 2f       	mov	r18, r24
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 2e       	mov	r0, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_SetPinDirection+0x80>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	0a 94       	dec	r0
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_SetPinDirection+0x7c>
 182:	80 95       	com	r24
 184:	84 23       	and	r24, r20
 186:	8c 93       	st	X, r24
 188:	a9 c0       	rjmp	.+338    	; 0x2dc <DIO_SetPinDirection+0x1de>
					}
					else if(au8_DIRECTION==OUTPUT)
 18a:	8c 81       	ldd	r24, Y+4	; 0x04
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	09 f0       	breq	.+2      	; 0x192 <DIO_SetPinDirection+0x94>
 190:	a5 c0       	rjmp	.+330    	; 0x2dc <DIO_SetPinDirection+0x1de>
					{
						SET_BIT(DDRA_REG,au8_PIN);
 192:	aa e3       	ldi	r26, 0x3A	; 58
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	ea e3       	ldi	r30, 0x3A	; 58
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	48 2f       	mov	r20, r24
 19e:	8b 81       	ldd	r24, Y+3	; 0x03
 1a0:	28 2f       	mov	r18, r24
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 2e       	mov	r0, r18
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_SetPinDirection+0xb2>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	0a 94       	dec	r0
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_SetPinDirection+0xae>
 1b4:	84 2b       	or	r24, r20
 1b6:	8c 93       	st	X, r24
 1b8:	91 c0       	rjmp	.+290    	; 0x2dc <DIO_SetPinDirection+0x1de>
					else
					{
						//do noting
					}
					break;
		case PORTB: if (au8_DIRECTION==INPUT)
 1ba:	8c 81       	ldd	r24, Y+4	; 0x04
 1bc:	88 23       	and	r24, r24
 1be:	a9 f4       	brne	.+42     	; 0x1ea <DIO_SetPinDirection+0xec>
					{
						CLR_BIT(DDRB_REG,au8_PIN);
 1c0:	a7 e3       	ldi	r26, 0x37	; 55
 1c2:	b0 e0       	ldi	r27, 0x00	; 0
 1c4:	e7 e3       	ldi	r30, 0x37	; 55
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	48 2f       	mov	r20, r24
 1cc:	8b 81       	ldd	r24, Y+3	; 0x03
 1ce:	28 2f       	mov	r18, r24
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 2e       	mov	r0, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_SetPinDirection+0xe0>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	0a 94       	dec	r0
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_SetPinDirection+0xdc>
 1e2:	80 95       	com	r24
 1e4:	84 23       	and	r24, r20
 1e6:	8c 93       	st	X, r24
 1e8:	79 c0       	rjmp	.+242    	; 0x2dc <DIO_SetPinDirection+0x1de>
					}
					else if(au8_DIRECTION==OUTPUT)
 1ea:	8c 81       	ldd	r24, Y+4	; 0x04
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <DIO_SetPinDirection+0xf4>
 1f0:	75 c0       	rjmp	.+234    	; 0x2dc <DIO_SetPinDirection+0x1de>
					{
						SET_BIT(DDRB_REG,au8_PIN);
 1f2:	a7 e3       	ldi	r26, 0x37	; 55
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	e7 e3       	ldi	r30, 0x37	; 55
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	48 2f       	mov	r20, r24
 1fe:	8b 81       	ldd	r24, Y+3	; 0x03
 200:	28 2f       	mov	r18, r24
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 2e       	mov	r0, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_SetPinDirection+0x112>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	0a 94       	dec	r0
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_SetPinDirection+0x10e>
 214:	84 2b       	or	r24, r20
 216:	8c 93       	st	X, r24
 218:	61 c0       	rjmp	.+194    	; 0x2dc <DIO_SetPinDirection+0x1de>
					else
					{
						//do noting
					}
					break;
		case PORTC: if (au8_DIRECTION==INPUT)
 21a:	8c 81       	ldd	r24, Y+4	; 0x04
 21c:	88 23       	and	r24, r24
 21e:	a9 f4       	brne	.+42     	; 0x24a <DIO_SetPinDirection+0x14c>
					{
						CLR_BIT(DDRC_REG,au8_PIN);
 220:	a4 e3       	ldi	r26, 0x34	; 52
 222:	b0 e0       	ldi	r27, 0x00	; 0
 224:	e4 e3       	ldi	r30, 0x34	; 52
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	48 2f       	mov	r20, r24
 22c:	8b 81       	ldd	r24, Y+3	; 0x03
 22e:	28 2f       	mov	r18, r24
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 2e       	mov	r0, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_SetPinDirection+0x140>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_SetPinDirection+0x13c>
 242:	80 95       	com	r24
 244:	84 23       	and	r24, r20
 246:	8c 93       	st	X, r24
 248:	49 c0       	rjmp	.+146    	; 0x2dc <DIO_SetPinDirection+0x1de>
					}
					else if(au8_DIRECTION==OUTPUT)
 24a:	8c 81       	ldd	r24, Y+4	; 0x04
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	09 f0       	breq	.+2      	; 0x252 <DIO_SetPinDirection+0x154>
 250:	45 c0       	rjmp	.+138    	; 0x2dc <DIO_SetPinDirection+0x1de>
					{
						SET_BIT(DDRC_REG,au8_PIN);
 252:	a4 e3       	ldi	r26, 0x34	; 52
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	e4 e3       	ldi	r30, 0x34	; 52
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	48 2f       	mov	r20, r24
 25e:	8b 81       	ldd	r24, Y+3	; 0x03
 260:	28 2f       	mov	r18, r24
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 2e       	mov	r0, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_SetPinDirection+0x172>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	0a 94       	dec	r0
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_SetPinDirection+0x16e>
 274:	84 2b       	or	r24, r20
 276:	8c 93       	st	X, r24
 278:	31 c0       	rjmp	.+98     	; 0x2dc <DIO_SetPinDirection+0x1de>
					else
					{
						//do noting
					}
					break;
		case PORTD: if (au8_DIRECTION==INPUT)
 27a:	8c 81       	ldd	r24, Y+4	; 0x04
 27c:	88 23       	and	r24, r24
 27e:	a9 f4       	brne	.+42     	; 0x2aa <DIO_SetPinDirection+0x1ac>
					{
						CLR_BIT(DDRD_REG,au8_PIN);
 280:	a1 e3       	ldi	r26, 0x31	; 49
 282:	b0 e0       	ldi	r27, 0x00	; 0
 284:	e1 e3       	ldi	r30, 0x31	; 49
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	48 2f       	mov	r20, r24
 28c:	8b 81       	ldd	r24, Y+3	; 0x03
 28e:	28 2f       	mov	r18, r24
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 2e       	mov	r0, r18
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_SetPinDirection+0x1a0>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	0a 94       	dec	r0
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_SetPinDirection+0x19c>
 2a2:	80 95       	com	r24
 2a4:	84 23       	and	r24, r20
 2a6:	8c 93       	st	X, r24
 2a8:	19 c0       	rjmp	.+50     	; 0x2dc <DIO_SetPinDirection+0x1de>
					}
					else if(au8_DIRECTION==OUTPUT)
 2aa:	8c 81       	ldd	r24, Y+4	; 0x04
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	b1 f4       	brne	.+44     	; 0x2dc <DIO_SetPinDirection+0x1de>
					{
						SET_BIT(DDRD_REG,au8_PIN);
 2b0:	a1 e3       	ldi	r26, 0x31	; 49
 2b2:	b0 e0       	ldi	r27, 0x00	; 0
 2b4:	e1 e3       	ldi	r30, 0x31	; 49
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	48 2f       	mov	r20, r24
 2bc:	8b 81       	ldd	r24, Y+3	; 0x03
 2be:	28 2f       	mov	r18, r24
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 2e       	mov	r0, r18
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_SetPinDirection+0x1d0>
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	0a 94       	dec	r0
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_SetPinDirection+0x1cc>
 2d2:	84 2b       	or	r24, r20
 2d4:	8c 93       	st	X, r24
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_SetPinDirection+0x1de>
					else
					{
						//do noting
					}
					break;
		default:au8_errorstate = DIO_CHOISE_NOT_FOUND;//error
 2d8:	85 e0       	ldi	r24, 0x05	; 5
 2da:	89 83       	std	Y+1, r24	; 0x01
			break;
	}//switch
	return au8_errorstate;
 2dc:	89 81       	ldd	r24, Y+1	; 0x01
}//function
 2de:	26 96       	adiw	r28, 0x06	; 6
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	f8 94       	cli
 2e4:	de bf       	out	0x3e, r29	; 62
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	cd bf       	out	0x3d, r28	; 61
 2ea:	cf 91       	pop	r28
 2ec:	df 91       	pop	r29
 2ee:	08 95       	ret

000002f0 <DIO_SetPinValue>:
uint8_t DIO_SetPinValue(uint8_t au8_PORT , uint8_t au8_PIN , uint8_t au8_VALUE)
{
 2f0:	df 93       	push	r29
 2f2:	cf 93       	push	r28
 2f4:	00 d0       	rcall	.+0      	; 0x2f6 <DIO_SetPinValue+0x6>
 2f6:	00 d0       	rcall	.+0      	; 0x2f8 <DIO_SetPinValue+0x8>
 2f8:	00 d0       	rcall	.+0      	; 0x2fa <DIO_SetPinValue+0xa>
 2fa:	cd b7       	in	r28, 0x3d	; 61
 2fc:	de b7       	in	r29, 0x3e	; 62
 2fe:	8a 83       	std	Y+2, r24	; 0x02
 300:	6b 83       	std	Y+3, r22	; 0x03
 302:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t au8_errorstate = DIO_SUCCESS ;
 304:	84 e0       	ldi	r24, 0x04	; 4
 306:	89 83       	std	Y+1, r24	; 0x01
	switch (au8_PORT)
 308:	8a 81       	ldd	r24, Y+2	; 0x02
 30a:	28 2f       	mov	r18, r24
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	3e 83       	std	Y+6, r19	; 0x06
 310:	2d 83       	std	Y+5, r18	; 0x05
 312:	8d 81       	ldd	r24, Y+5	; 0x05
 314:	9e 81       	ldd	r25, Y+6	; 0x06
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	91 05       	cpc	r25, r1
 31a:	09 f4       	brne	.+2      	; 0x31e <DIO_SetPinValue+0x2e>
 31c:	47 c0       	rjmp	.+142    	; 0x3ac <DIO_SetPinValue+0xbc>
 31e:	2d 81       	ldd	r18, Y+5	; 0x05
 320:	3e 81       	ldd	r19, Y+6	; 0x06
 322:	22 30       	cpi	r18, 0x02	; 2
 324:	31 05       	cpc	r19, r1
 326:	2c f4       	brge	.+10     	; 0x332 <DIO_SetPinValue+0x42>
 328:	8d 81       	ldd	r24, Y+5	; 0x05
 32a:	9e 81       	ldd	r25, Y+6	; 0x06
 32c:	00 97       	sbiw	r24, 0x00	; 0
 32e:	71 f0       	breq	.+28     	; 0x34c <DIO_SetPinValue+0x5c>
 330:	cc c0       	rjmp	.+408    	; 0x4ca <DIO_SetPinValue+0x1da>
 332:	2d 81       	ldd	r18, Y+5	; 0x05
 334:	3e 81       	ldd	r19, Y+6	; 0x06
 336:	22 30       	cpi	r18, 0x02	; 2
 338:	31 05       	cpc	r19, r1
 33a:	09 f4       	brne	.+2      	; 0x33e <DIO_SetPinValue+0x4e>
 33c:	67 c0       	rjmp	.+206    	; 0x40c <DIO_SetPinValue+0x11c>
 33e:	8d 81       	ldd	r24, Y+5	; 0x05
 340:	9e 81       	ldd	r25, Y+6	; 0x06
 342:	83 30       	cpi	r24, 0x03	; 3
 344:	91 05       	cpc	r25, r1
 346:	09 f4       	brne	.+2      	; 0x34a <DIO_SetPinValue+0x5a>
 348:	91 c0       	rjmp	.+290    	; 0x46c <DIO_SetPinValue+0x17c>
 34a:	bf c0       	rjmp	.+382    	; 0x4ca <DIO_SetPinValue+0x1da>
		{
			case PORTA: if (au8_VALUE==LOW)
 34c:	8c 81       	ldd	r24, Y+4	; 0x04
 34e:	88 23       	and	r24, r24
 350:	a9 f4       	brne	.+42     	; 0x37c <DIO_SetPinValue+0x8c>
						{
							CLR_BIT(PORTA_REG,au8_PIN);
 352:	ab e3       	ldi	r26, 0x3B	; 59
 354:	b0 e0       	ldi	r27, 0x00	; 0
 356:	eb e3       	ldi	r30, 0x3B	; 59
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	48 2f       	mov	r20, r24
 35e:	8b 81       	ldd	r24, Y+3	; 0x03
 360:	28 2f       	mov	r18, r24
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 2e       	mov	r0, r18
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_SetPinValue+0x80>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	0a 94       	dec	r0
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_SetPinValue+0x7c>
 374:	80 95       	com	r24
 376:	84 23       	and	r24, r20
 378:	8c 93       	st	X, r24
 37a:	a9 c0       	rjmp	.+338    	; 0x4ce <DIO_SetPinValue+0x1de>
						}
						else if(au8_VALUE==HIGH)
 37c:	8c 81       	ldd	r24, Y+4	; 0x04
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	09 f0       	breq	.+2      	; 0x384 <DIO_SetPinValue+0x94>
 382:	a5 c0       	rjmp	.+330    	; 0x4ce <DIO_SetPinValue+0x1de>
						{
							SET_BIT(PORTA_REG,au8_PIN);
 384:	ab e3       	ldi	r26, 0x3B	; 59
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	eb e3       	ldi	r30, 0x3B	; 59
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	48 2f       	mov	r20, r24
 390:	8b 81       	ldd	r24, Y+3	; 0x03
 392:	28 2f       	mov	r18, r24
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 2e       	mov	r0, r18
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_SetPinValue+0xb2>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	0a 94       	dec	r0
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_SetPinValue+0xae>
 3a6:	84 2b       	or	r24, r20
 3a8:	8c 93       	st	X, r24
 3aa:	91 c0       	rjmp	.+290    	; 0x4ce <DIO_SetPinValue+0x1de>
						else
						{
							//do noting
						}
						break;
			case PORTB: if (au8_VALUE==LOW)
 3ac:	8c 81       	ldd	r24, Y+4	; 0x04
 3ae:	88 23       	and	r24, r24
 3b0:	a9 f4       	brne	.+42     	; 0x3dc <DIO_SetPinValue+0xec>
						{
							CLR_BIT(PORTB_REG,au8_PIN);
 3b2:	a8 e3       	ldi	r26, 0x38	; 56
 3b4:	b0 e0       	ldi	r27, 0x00	; 0
 3b6:	e8 e3       	ldi	r30, 0x38	; 56
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	48 2f       	mov	r20, r24
 3be:	8b 81       	ldd	r24, Y+3	; 0x03
 3c0:	28 2f       	mov	r18, r24
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 2e       	mov	r0, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_SetPinValue+0xe0>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	0a 94       	dec	r0
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_SetPinValue+0xdc>
 3d4:	80 95       	com	r24
 3d6:	84 23       	and	r24, r20
 3d8:	8c 93       	st	X, r24
 3da:	79 c0       	rjmp	.+242    	; 0x4ce <DIO_SetPinValue+0x1de>
						}
						else if(au8_VALUE==HIGH)
 3dc:	8c 81       	ldd	r24, Y+4	; 0x04
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <DIO_SetPinValue+0xf4>
 3e2:	75 c0       	rjmp	.+234    	; 0x4ce <DIO_SetPinValue+0x1de>
						{
							SET_BIT(PORTB_REG,au8_PIN);
 3e4:	a8 e3       	ldi	r26, 0x38	; 56
 3e6:	b0 e0       	ldi	r27, 0x00	; 0
 3e8:	e8 e3       	ldi	r30, 0x38	; 56
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	48 2f       	mov	r20, r24
 3f0:	8b 81       	ldd	r24, Y+3	; 0x03
 3f2:	28 2f       	mov	r18, r24
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 2e       	mov	r0, r18
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <DIO_SetPinValue+0x112>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_SetPinValue+0x10e>
 406:	84 2b       	or	r24, r20
 408:	8c 93       	st	X, r24
 40a:	61 c0       	rjmp	.+194    	; 0x4ce <DIO_SetPinValue+0x1de>
						else
						{
							//do noting
						}
						break;
			case PORTC: if (au8_VALUE==LOW)
 40c:	8c 81       	ldd	r24, Y+4	; 0x04
 40e:	88 23       	and	r24, r24
 410:	a9 f4       	brne	.+42     	; 0x43c <DIO_SetPinValue+0x14c>
						{
							CLR_BIT(PORTC_REG,au8_PIN);
 412:	a5 e3       	ldi	r26, 0x35	; 53
 414:	b0 e0       	ldi	r27, 0x00	; 0
 416:	e5 e3       	ldi	r30, 0x35	; 53
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	48 2f       	mov	r20, r24
 41e:	8b 81       	ldd	r24, Y+3	; 0x03
 420:	28 2f       	mov	r18, r24
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 2e       	mov	r0, r18
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_SetPinValue+0x140>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	0a 94       	dec	r0
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_SetPinValue+0x13c>
 434:	80 95       	com	r24
 436:	84 23       	and	r24, r20
 438:	8c 93       	st	X, r24
 43a:	49 c0       	rjmp	.+146    	; 0x4ce <DIO_SetPinValue+0x1de>
						}
						else if(au8_VALUE==HIGH)
 43c:	8c 81       	ldd	r24, Y+4	; 0x04
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	09 f0       	breq	.+2      	; 0x444 <DIO_SetPinValue+0x154>
 442:	45 c0       	rjmp	.+138    	; 0x4ce <DIO_SetPinValue+0x1de>
						{
							SET_BIT(PORTC_REG,au8_PIN);
 444:	a5 e3       	ldi	r26, 0x35	; 53
 446:	b0 e0       	ldi	r27, 0x00	; 0
 448:	e5 e3       	ldi	r30, 0x35	; 53
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	80 81       	ld	r24, Z
 44e:	48 2f       	mov	r20, r24
 450:	8b 81       	ldd	r24, Y+3	; 0x03
 452:	28 2f       	mov	r18, r24
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	02 2e       	mov	r0, r18
 45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_SetPinValue+0x172>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	0a 94       	dec	r0
 464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_SetPinValue+0x16e>
 466:	84 2b       	or	r24, r20
 468:	8c 93       	st	X, r24
 46a:	31 c0       	rjmp	.+98     	; 0x4ce <DIO_SetPinValue+0x1de>
						else
						{
							//do noting
						}
						break;
			case PORTD: if (au8_VALUE==LOW)
 46c:	8c 81       	ldd	r24, Y+4	; 0x04
 46e:	88 23       	and	r24, r24
 470:	a9 f4       	brne	.+42     	; 0x49c <DIO_SetPinValue+0x1ac>
						{
							CLR_BIT(PORTD_REG,au8_PIN);
 472:	a2 e3       	ldi	r26, 0x32	; 50
 474:	b0 e0       	ldi	r27, 0x00	; 0
 476:	e2 e3       	ldi	r30, 0x32	; 50
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	48 2f       	mov	r20, r24
 47e:	8b 81       	ldd	r24, Y+3	; 0x03
 480:	28 2f       	mov	r18, r24
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	02 2e       	mov	r0, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_SetPinValue+0x1a0>
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	0a 94       	dec	r0
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_SetPinValue+0x19c>
 494:	80 95       	com	r24
 496:	84 23       	and	r24, r20
 498:	8c 93       	st	X, r24
 49a:	19 c0       	rjmp	.+50     	; 0x4ce <DIO_SetPinValue+0x1de>
						}
						else if(au8_VALUE==HIGH)
 49c:	8c 81       	ldd	r24, Y+4	; 0x04
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	b1 f4       	brne	.+44     	; 0x4ce <DIO_SetPinValue+0x1de>
						{
							SET_BIT(PORTD_REG,au8_PIN);
 4a2:	a2 e3       	ldi	r26, 0x32	; 50
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	e2 e3       	ldi	r30, 0x32	; 50
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	48 2f       	mov	r20, r24
 4ae:	8b 81       	ldd	r24, Y+3	; 0x03
 4b0:	28 2f       	mov	r18, r24
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 2e       	mov	r0, r18
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_SetPinValue+0x1d0>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	0a 94       	dec	r0
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_SetPinValue+0x1cc>
 4c4:	84 2b       	or	r24, r20
 4c6:	8c 93       	st	X, r24
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_SetPinValue+0x1de>
						else
						{
							//do noting
						}
						break;
			default:au8_errorstate = DIO_CHOISE_NOT_FOUND;//error
 4ca:	85 e0       	ldi	r24, 0x05	; 5
 4cc:	89 83       	std	Y+1, r24	; 0x01
				break;
		}//switch
	return au8_errorstate;
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
}//function
 4d0:	26 96       	adiw	r28, 0x06	; 6
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	f8 94       	cli
 4d6:	de bf       	out	0x3e, r29	; 62
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	cd bf       	out	0x3d, r28	; 61
 4dc:	cf 91       	pop	r28
 4de:	df 91       	pop	r29
 4e0:	08 95       	ret

000004e2 <DIO_TogPinValue>:
uint8_t DIO_TogPinValue(uint8_t au8_PORT , uint8_t PIN)
{
 4e2:	df 93       	push	r29
 4e4:	cf 93       	push	r28
 4e6:	00 d0       	rcall	.+0      	; 0x4e8 <DIO_TogPinValue+0x6>
 4e8:	00 d0       	rcall	.+0      	; 0x4ea <DIO_TogPinValue+0x8>
 4ea:	0f 92       	push	r0
 4ec:	cd b7       	in	r28, 0x3d	; 61
 4ee:	de b7       	in	r29, 0x3e	; 62
 4f0:	8a 83       	std	Y+2, r24	; 0x02
 4f2:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_errorstate = DIO_SUCCESS ;
 4f4:	84 e0       	ldi	r24, 0x04	; 4
 4f6:	89 83       	std	Y+1, r24	; 0x01
	switch(au8_PORT)
 4f8:	8a 81       	ldd	r24, Y+2	; 0x02
 4fa:	28 2f       	mov	r18, r24
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	3d 83       	std	Y+5, r19	; 0x05
 500:	2c 83       	std	Y+4, r18	; 0x04
 502:	8c 81       	ldd	r24, Y+4	; 0x04
 504:	9d 81       	ldd	r25, Y+5	; 0x05
 506:	81 30       	cpi	r24, 0x01	; 1
 508:	91 05       	cpc	r25, r1
 50a:	49 f1       	breq	.+82     	; 0x55e <DIO_TogPinValue+0x7c>
 50c:	2c 81       	ldd	r18, Y+4	; 0x04
 50e:	3d 81       	ldd	r19, Y+5	; 0x05
 510:	22 30       	cpi	r18, 0x02	; 2
 512:	31 05       	cpc	r19, r1
 514:	2c f4       	brge	.+10     	; 0x520 <DIO_TogPinValue+0x3e>
 516:	8c 81       	ldd	r24, Y+4	; 0x04
 518:	9d 81       	ldd	r25, Y+5	; 0x05
 51a:	00 97       	sbiw	r24, 0x00	; 0
 51c:	61 f0       	breq	.+24     	; 0x536 <DIO_TogPinValue+0x54>
 51e:	5b c0       	rjmp	.+182    	; 0x5d6 <DIO_TogPinValue+0xf4>
 520:	2c 81       	ldd	r18, Y+4	; 0x04
 522:	3d 81       	ldd	r19, Y+5	; 0x05
 524:	22 30       	cpi	r18, 0x02	; 2
 526:	31 05       	cpc	r19, r1
 528:	71 f1       	breq	.+92     	; 0x586 <DIO_TogPinValue+0xa4>
 52a:	8c 81       	ldd	r24, Y+4	; 0x04
 52c:	9d 81       	ldd	r25, Y+5	; 0x05
 52e:	83 30       	cpi	r24, 0x03	; 3
 530:	91 05       	cpc	r25, r1
 532:	e9 f1       	breq	.+122    	; 0x5ae <DIO_TogPinValue+0xcc>
 534:	50 c0       	rjmp	.+160    	; 0x5d6 <DIO_TogPinValue+0xf4>
	{
		case PORTA: TOG_BIT(PORTA_REG,PIN);break;
 536:	ab e3       	ldi	r26, 0x3B	; 59
 538:	b0 e0       	ldi	r27, 0x00	; 0
 53a:	eb e3       	ldi	r30, 0x3B	; 59
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	48 2f       	mov	r20, r24
 542:	8b 81       	ldd	r24, Y+3	; 0x03
 544:	28 2f       	mov	r18, r24
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	02 2e       	mov	r0, r18
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_TogPinValue+0x72>
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	0a 94       	dec	r0
 556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_TogPinValue+0x6e>
 558:	84 27       	eor	r24, r20
 55a:	8c 93       	st	X, r24
 55c:	3e c0       	rjmp	.+124    	; 0x5da <DIO_TogPinValue+0xf8>
		case PORTB: TOG_BIT(PORTB_REG,PIN);break;
 55e:	a8 e3       	ldi	r26, 0x38	; 56
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	e8 e3       	ldi	r30, 0x38	; 56
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	48 2f       	mov	r20, r24
 56a:	8b 81       	ldd	r24, Y+3	; 0x03
 56c:	28 2f       	mov	r18, r24
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 2e       	mov	r0, r18
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_TogPinValue+0x9a>
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	0a 94       	dec	r0
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_TogPinValue+0x96>
 580:	84 27       	eor	r24, r20
 582:	8c 93       	st	X, r24
 584:	2a c0       	rjmp	.+84     	; 0x5da <DIO_TogPinValue+0xf8>
		case PORTC: TOG_BIT(PORTC_REG,PIN);break;
 586:	a5 e3       	ldi	r26, 0x35	; 53
 588:	b0 e0       	ldi	r27, 0x00	; 0
 58a:	e5 e3       	ldi	r30, 0x35	; 53
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	48 2f       	mov	r20, r24
 592:	8b 81       	ldd	r24, Y+3	; 0x03
 594:	28 2f       	mov	r18, r24
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	02 2e       	mov	r0, r18
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_TogPinValue+0xc2>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	0a 94       	dec	r0
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_TogPinValue+0xbe>
 5a8:	84 27       	eor	r24, r20
 5aa:	8c 93       	st	X, r24
 5ac:	16 c0       	rjmp	.+44     	; 0x5da <DIO_TogPinValue+0xf8>
		case PORTD: TOG_BIT(PORTD_REG,PIN);break;
 5ae:	a2 e3       	ldi	r26, 0x32	; 50
 5b0:	b0 e0       	ldi	r27, 0x00	; 0
 5b2:	e2 e3       	ldi	r30, 0x32	; 50
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	48 2f       	mov	r20, r24
 5ba:	8b 81       	ldd	r24, Y+3	; 0x03
 5bc:	28 2f       	mov	r18, r24
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 2e       	mov	r0, r18
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_TogPinValue+0xea>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	0a 94       	dec	r0
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_TogPinValue+0xe6>
 5d0:	84 27       	eor	r24, r20
 5d2:	8c 93       	st	X, r24
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_TogPinValue+0xf8>
		default:au8_errorstate = DIO_CHOISE_NOT_FOUND;//error
 5d6:	85 e0       	ldi	r24, 0x05	; 5
 5d8:	89 83       	std	Y+1, r24	; 0x01
			break;
	}//switch
	return au8_errorstate;
 5da:	89 81       	ldd	r24, Y+1	; 0x01
}//function
 5dc:	0f 90       	pop	r0
 5de:	0f 90       	pop	r0
 5e0:	0f 90       	pop	r0
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	cf 91       	pop	r28
 5e8:	df 91       	pop	r29
 5ea:	08 95       	ret

000005ec <DIO_TogPinDirection>:
uint8_t DIO_TogPinDirection(uint8_t au8_PORT , uint8_t PIN)
{
 5ec:	df 93       	push	r29
 5ee:	cf 93       	push	r28
 5f0:	00 d0       	rcall	.+0      	; 0x5f2 <DIO_TogPinDirection+0x6>
 5f2:	00 d0       	rcall	.+0      	; 0x5f4 <DIO_TogPinDirection+0x8>
 5f4:	0f 92       	push	r0
 5f6:	cd b7       	in	r28, 0x3d	; 61
 5f8:	de b7       	in	r29, 0x3e	; 62
 5fa:	8a 83       	std	Y+2, r24	; 0x02
 5fc:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_errorstate = DIO_SUCCESS ;
 5fe:	84 e0       	ldi	r24, 0x04	; 4
 600:	89 83       	std	Y+1, r24	; 0x01
	switch(au8_PORT)
 602:	8a 81       	ldd	r24, Y+2	; 0x02
 604:	28 2f       	mov	r18, r24
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	3d 83       	std	Y+5, r19	; 0x05
 60a:	2c 83       	std	Y+4, r18	; 0x04
 60c:	8c 81       	ldd	r24, Y+4	; 0x04
 60e:	9d 81       	ldd	r25, Y+5	; 0x05
 610:	81 30       	cpi	r24, 0x01	; 1
 612:	91 05       	cpc	r25, r1
 614:	49 f1       	breq	.+82     	; 0x668 <DIO_TogPinDirection+0x7c>
 616:	2c 81       	ldd	r18, Y+4	; 0x04
 618:	3d 81       	ldd	r19, Y+5	; 0x05
 61a:	22 30       	cpi	r18, 0x02	; 2
 61c:	31 05       	cpc	r19, r1
 61e:	2c f4       	brge	.+10     	; 0x62a <DIO_TogPinDirection+0x3e>
 620:	8c 81       	ldd	r24, Y+4	; 0x04
 622:	9d 81       	ldd	r25, Y+5	; 0x05
 624:	00 97       	sbiw	r24, 0x00	; 0
 626:	61 f0       	breq	.+24     	; 0x640 <DIO_TogPinDirection+0x54>
 628:	5b c0       	rjmp	.+182    	; 0x6e0 <DIO_TogPinDirection+0xf4>
 62a:	2c 81       	ldd	r18, Y+4	; 0x04
 62c:	3d 81       	ldd	r19, Y+5	; 0x05
 62e:	22 30       	cpi	r18, 0x02	; 2
 630:	31 05       	cpc	r19, r1
 632:	71 f1       	breq	.+92     	; 0x690 <DIO_TogPinDirection+0xa4>
 634:	8c 81       	ldd	r24, Y+4	; 0x04
 636:	9d 81       	ldd	r25, Y+5	; 0x05
 638:	83 30       	cpi	r24, 0x03	; 3
 63a:	91 05       	cpc	r25, r1
 63c:	e9 f1       	breq	.+122    	; 0x6b8 <DIO_TogPinDirection+0xcc>
 63e:	50 c0       	rjmp	.+160    	; 0x6e0 <DIO_TogPinDirection+0xf4>
	{
		case PORTA: TOG_BIT(DDRA_REG,PIN);break;
 640:	aa e3       	ldi	r26, 0x3A	; 58
 642:	b0 e0       	ldi	r27, 0x00	; 0
 644:	ea e3       	ldi	r30, 0x3A	; 58
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	80 81       	ld	r24, Z
 64a:	48 2f       	mov	r20, r24
 64c:	8b 81       	ldd	r24, Y+3	; 0x03
 64e:	28 2f       	mov	r18, r24
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	02 2e       	mov	r0, r18
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_TogPinDirection+0x72>
 65a:	88 0f       	add	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	0a 94       	dec	r0
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_TogPinDirection+0x6e>
 662:	84 27       	eor	r24, r20
 664:	8c 93       	st	X, r24
 666:	3e c0       	rjmp	.+124    	; 0x6e4 <DIO_TogPinDirection+0xf8>
		case PORTB: TOG_BIT(DDRB_REG,PIN);break;
 668:	a7 e3       	ldi	r26, 0x37	; 55
 66a:	b0 e0       	ldi	r27, 0x00	; 0
 66c:	e7 e3       	ldi	r30, 0x37	; 55
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	80 81       	ld	r24, Z
 672:	48 2f       	mov	r20, r24
 674:	8b 81       	ldd	r24, Y+3	; 0x03
 676:	28 2f       	mov	r18, r24
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	02 2e       	mov	r0, r18
 680:	02 c0       	rjmp	.+4      	; 0x686 <DIO_TogPinDirection+0x9a>
 682:	88 0f       	add	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	0a 94       	dec	r0
 688:	e2 f7       	brpl	.-8      	; 0x682 <DIO_TogPinDirection+0x96>
 68a:	84 27       	eor	r24, r20
 68c:	8c 93       	st	X, r24
 68e:	2a c0       	rjmp	.+84     	; 0x6e4 <DIO_TogPinDirection+0xf8>
		case PORTC: TOG_BIT(DDRC_REG,PIN);break;
 690:	a4 e3       	ldi	r26, 0x34	; 52
 692:	b0 e0       	ldi	r27, 0x00	; 0
 694:	e4 e3       	ldi	r30, 0x34	; 52
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	80 81       	ld	r24, Z
 69a:	48 2f       	mov	r20, r24
 69c:	8b 81       	ldd	r24, Y+3	; 0x03
 69e:	28 2f       	mov	r18, r24
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	02 2e       	mov	r0, r18
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <DIO_TogPinDirection+0xc2>
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	0a 94       	dec	r0
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <DIO_TogPinDirection+0xbe>
 6b2:	84 27       	eor	r24, r20
 6b4:	8c 93       	st	X, r24
 6b6:	16 c0       	rjmp	.+44     	; 0x6e4 <DIO_TogPinDirection+0xf8>
		case PORTD: TOG_BIT(DDRD_REG,PIN);break;
 6b8:	a1 e3       	ldi	r26, 0x31	; 49
 6ba:	b0 e0       	ldi	r27, 0x00	; 0
 6bc:	e1 e3       	ldi	r30, 0x31	; 49
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
 6c2:	48 2f       	mov	r20, r24
 6c4:	8b 81       	ldd	r24, Y+3	; 0x03
 6c6:	28 2f       	mov	r18, r24
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	02 2e       	mov	r0, r18
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <DIO_TogPinDirection+0xea>
 6d2:	88 0f       	add	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	0a 94       	dec	r0
 6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <DIO_TogPinDirection+0xe6>
 6da:	84 27       	eor	r24, r20
 6dc:	8c 93       	st	X, r24
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <DIO_TogPinDirection+0xf8>
		default:au8_errorstate = DIO_CHOISE_NOT_FOUND;//error
 6e0:	85 e0       	ldi	r24, 0x05	; 5
 6e2:	89 83       	std	Y+1, r24	; 0x01
			break;
	}//switch
	return au8_errorstate;
 6e4:	89 81       	ldd	r24, Y+1	; 0x01
}//function
 6e6:	0f 90       	pop	r0
 6e8:	0f 90       	pop	r0
 6ea:	0f 90       	pop	r0
 6ec:	0f 90       	pop	r0
 6ee:	0f 90       	pop	r0
 6f0:	cf 91       	pop	r28
 6f2:	df 91       	pop	r29
 6f4:	08 95       	ret

000006f6 <DIO_Setau8_PORTDirection>:
uint8_t DIO_Setau8_PORTDirection(uint8_t au8_PORT , uint8_t DIRECTION)
{
 6f6:	df 93       	push	r29
 6f8:	cf 93       	push	r28
 6fa:	00 d0       	rcall	.+0      	; 0x6fc <DIO_Setau8_PORTDirection+0x6>
 6fc:	00 d0       	rcall	.+0      	; 0x6fe <DIO_Setau8_PORTDirection+0x8>
 6fe:	0f 92       	push	r0
 700:	cd b7       	in	r28, 0x3d	; 61
 702:	de b7       	in	r29, 0x3e	; 62
 704:	8a 83       	std	Y+2, r24	; 0x02
 706:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_errorstate = DIO_SUCCESS ;
 708:	84 e0       	ldi	r24, 0x04	; 4
 70a:	89 83       	std	Y+1, r24	; 0x01
	switch(au8_PORT)
 70c:	8a 81       	ldd	r24, Y+2	; 0x02
 70e:	28 2f       	mov	r18, r24
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	3d 83       	std	Y+5, r19	; 0x05
 714:	2c 83       	std	Y+4, r18	; 0x04
 716:	8c 81       	ldd	r24, Y+4	; 0x04
 718:	9d 81       	ldd	r25, Y+5	; 0x05
 71a:	81 30       	cpi	r24, 0x01	; 1
 71c:	91 05       	cpc	r25, r1
 71e:	d1 f0       	breq	.+52     	; 0x754 <DIO_Setau8_PORTDirection+0x5e>
 720:	2c 81       	ldd	r18, Y+4	; 0x04
 722:	3d 81       	ldd	r19, Y+5	; 0x05
 724:	22 30       	cpi	r18, 0x02	; 2
 726:	31 05       	cpc	r19, r1
 728:	2c f4       	brge	.+10     	; 0x734 <DIO_Setau8_PORTDirection+0x3e>
 72a:	8c 81       	ldd	r24, Y+4	; 0x04
 72c:	9d 81       	ldd	r25, Y+5	; 0x05
 72e:	00 97       	sbiw	r24, 0x00	; 0
 730:	61 f0       	breq	.+24     	; 0x74a <DIO_Setau8_PORTDirection+0x54>
 732:	1f c0       	rjmp	.+62     	; 0x772 <DIO_Setau8_PORTDirection+0x7c>
 734:	2c 81       	ldd	r18, Y+4	; 0x04
 736:	3d 81       	ldd	r19, Y+5	; 0x05
 738:	22 30       	cpi	r18, 0x02	; 2
 73a:	31 05       	cpc	r19, r1
 73c:	81 f0       	breq	.+32     	; 0x75e <DIO_Setau8_PORTDirection+0x68>
 73e:	8c 81       	ldd	r24, Y+4	; 0x04
 740:	9d 81       	ldd	r25, Y+5	; 0x05
 742:	83 30       	cpi	r24, 0x03	; 3
 744:	91 05       	cpc	r25, r1
 746:	81 f0       	breq	.+32     	; 0x768 <DIO_Setau8_PORTDirection+0x72>
 748:	14 c0       	rjmp	.+40     	; 0x772 <DIO_Setau8_PORTDirection+0x7c>
	{
		case PORTA: DDRA_REG=DIRECTION;break;
 74a:	ea e3       	ldi	r30, 0x3A	; 58
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	8b 81       	ldd	r24, Y+3	; 0x03
 750:	80 83       	st	Z, r24
 752:	11 c0       	rjmp	.+34     	; 0x776 <DIO_Setau8_PORTDirection+0x80>
		case PORTB: DDRB_REG=DIRECTION;break;
 754:	e7 e3       	ldi	r30, 0x37	; 55
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	8b 81       	ldd	r24, Y+3	; 0x03
 75a:	80 83       	st	Z, r24
 75c:	0c c0       	rjmp	.+24     	; 0x776 <DIO_Setau8_PORTDirection+0x80>
		case PORTC: DDRC_REG=DIRECTION;break;
 75e:	e4 e3       	ldi	r30, 0x34	; 52
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	8b 81       	ldd	r24, Y+3	; 0x03
 764:	80 83       	st	Z, r24
 766:	07 c0       	rjmp	.+14     	; 0x776 <DIO_Setau8_PORTDirection+0x80>
		case PORTD: DDRD_REG=DIRECTION;break;
 768:	e1 e3       	ldi	r30, 0x31	; 49
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	8b 81       	ldd	r24, Y+3	; 0x03
 76e:	80 83       	st	Z, r24
 770:	02 c0       	rjmp	.+4      	; 0x776 <DIO_Setau8_PORTDirection+0x80>
		default:au8_errorstate = DIO_CHOISE_NOT_FOUND;//error
 772:	85 e0       	ldi	r24, 0x05	; 5
 774:	89 83       	std	Y+1, r24	; 0x01
			break;
	}//switch
	return au8_errorstate;
 776:	89 81       	ldd	r24, Y+1	; 0x01
}//function
 778:	0f 90       	pop	r0
 77a:	0f 90       	pop	r0
 77c:	0f 90       	pop	r0
 77e:	0f 90       	pop	r0
 780:	0f 90       	pop	r0
 782:	cf 91       	pop	r28
 784:	df 91       	pop	r29
 786:	08 95       	ret

00000788 <DIO_Setau8_PORTValue>:
uint8_t DIO_Setau8_PORTValue(uint8_t au8_PORT , uint8_t VALUE)
{
 788:	df 93       	push	r29
 78a:	cf 93       	push	r28
 78c:	00 d0       	rcall	.+0      	; 0x78e <DIO_Setau8_PORTValue+0x6>
 78e:	00 d0       	rcall	.+0      	; 0x790 <DIO_Setau8_PORTValue+0x8>
 790:	0f 92       	push	r0
 792:	cd b7       	in	r28, 0x3d	; 61
 794:	de b7       	in	r29, 0x3e	; 62
 796:	8a 83       	std	Y+2, r24	; 0x02
 798:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_errorstate = DIO_SUCCESS ;
 79a:	84 e0       	ldi	r24, 0x04	; 4
 79c:	89 83       	std	Y+1, r24	; 0x01
	switch(au8_PORT)
 79e:	8a 81       	ldd	r24, Y+2	; 0x02
 7a0:	28 2f       	mov	r18, r24
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	3d 83       	std	Y+5, r19	; 0x05
 7a6:	2c 83       	std	Y+4, r18	; 0x04
 7a8:	8c 81       	ldd	r24, Y+4	; 0x04
 7aa:	9d 81       	ldd	r25, Y+5	; 0x05
 7ac:	81 30       	cpi	r24, 0x01	; 1
 7ae:	91 05       	cpc	r25, r1
 7b0:	d1 f0       	breq	.+52     	; 0x7e6 <DIO_Setau8_PORTValue+0x5e>
 7b2:	2c 81       	ldd	r18, Y+4	; 0x04
 7b4:	3d 81       	ldd	r19, Y+5	; 0x05
 7b6:	22 30       	cpi	r18, 0x02	; 2
 7b8:	31 05       	cpc	r19, r1
 7ba:	2c f4       	brge	.+10     	; 0x7c6 <DIO_Setau8_PORTValue+0x3e>
 7bc:	8c 81       	ldd	r24, Y+4	; 0x04
 7be:	9d 81       	ldd	r25, Y+5	; 0x05
 7c0:	00 97       	sbiw	r24, 0x00	; 0
 7c2:	61 f0       	breq	.+24     	; 0x7dc <DIO_Setau8_PORTValue+0x54>
 7c4:	1f c0       	rjmp	.+62     	; 0x804 <DIO_Setau8_PORTValue+0x7c>
 7c6:	2c 81       	ldd	r18, Y+4	; 0x04
 7c8:	3d 81       	ldd	r19, Y+5	; 0x05
 7ca:	22 30       	cpi	r18, 0x02	; 2
 7cc:	31 05       	cpc	r19, r1
 7ce:	81 f0       	breq	.+32     	; 0x7f0 <DIO_Setau8_PORTValue+0x68>
 7d0:	8c 81       	ldd	r24, Y+4	; 0x04
 7d2:	9d 81       	ldd	r25, Y+5	; 0x05
 7d4:	83 30       	cpi	r24, 0x03	; 3
 7d6:	91 05       	cpc	r25, r1
 7d8:	81 f0       	breq	.+32     	; 0x7fa <DIO_Setau8_PORTValue+0x72>
 7da:	14 c0       	rjmp	.+40     	; 0x804 <DIO_Setau8_PORTValue+0x7c>
	{
		case PORTA: PORTA_REG=VALUE;break;
 7dc:	eb e3       	ldi	r30, 0x3B	; 59
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	8b 81       	ldd	r24, Y+3	; 0x03
 7e2:	80 83       	st	Z, r24
 7e4:	11 c0       	rjmp	.+34     	; 0x808 <DIO_Setau8_PORTValue+0x80>
		case PORTB: PORTB_REG=VALUE;break;
 7e6:	e8 e3       	ldi	r30, 0x38	; 56
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	8b 81       	ldd	r24, Y+3	; 0x03
 7ec:	80 83       	st	Z, r24
 7ee:	0c c0       	rjmp	.+24     	; 0x808 <DIO_Setau8_PORTValue+0x80>
		case PORTC: PORTC_REG=VALUE;break;
 7f0:	e5 e3       	ldi	r30, 0x35	; 53
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	8b 81       	ldd	r24, Y+3	; 0x03
 7f6:	80 83       	st	Z, r24
 7f8:	07 c0       	rjmp	.+14     	; 0x808 <DIO_Setau8_PORTValue+0x80>
		case PORTD: PORTD_REG=VALUE;break;
 7fa:	e2 e3       	ldi	r30, 0x32	; 50
 7fc:	f0 e0       	ldi	r31, 0x00	; 0
 7fe:	8b 81       	ldd	r24, Y+3	; 0x03
 800:	80 83       	st	Z, r24
 802:	02 c0       	rjmp	.+4      	; 0x808 <DIO_Setau8_PORTValue+0x80>
		default:au8_errorstate = DIO_CHOISE_NOT_FOUND;//error
 804:	85 e0       	ldi	r24, 0x05	; 5
 806:	89 83       	std	Y+1, r24	; 0x01
			break;
	}//switch
	return au8_errorstate;
 808:	89 81       	ldd	r24, Y+1	; 0x01
}//function
 80a:	0f 90       	pop	r0
 80c:	0f 90       	pop	r0
 80e:	0f 90       	pop	r0
 810:	0f 90       	pop	r0
 812:	0f 90       	pop	r0
 814:	cf 91       	pop	r28
 816:	df 91       	pop	r29
 818:	08 95       	ret

0000081a <DIO_GetPinValue>:
uint8_t DIO_GetPinValue(uint8_t au8_PORT,uint8_t PIN)
{
 81a:	df 93       	push	r29
 81c:	cf 93       	push	r28
 81e:	00 d0       	rcall	.+0      	; 0x820 <DIO_GetPinValue+0x6>
 820:	00 d0       	rcall	.+0      	; 0x822 <DIO_GetPinValue+0x8>
 822:	0f 92       	push	r0
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
 828:	8a 83       	std	Y+2, r24	; 0x02
 82a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t PinValue;
	switch(au8_PORT)
 82c:	8a 81       	ldd	r24, Y+2	; 0x02
 82e:	28 2f       	mov	r18, r24
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	3d 83       	std	Y+5, r19	; 0x05
 834:	2c 83       	std	Y+4, r18	; 0x04
 836:	4c 81       	ldd	r20, Y+4	; 0x04
 838:	5d 81       	ldd	r21, Y+5	; 0x05
 83a:	41 30       	cpi	r20, 0x01	; 1
 83c:	51 05       	cpc	r21, r1
 83e:	41 f1       	breq	.+80     	; 0x890 <__stack+0x31>
 840:	8c 81       	ldd	r24, Y+4	; 0x04
 842:	9d 81       	ldd	r25, Y+5	; 0x05
 844:	82 30       	cpi	r24, 0x02	; 2
 846:	91 05       	cpc	r25, r1
 848:	34 f4       	brge	.+12     	; 0x856 <DIO_GetPinValue+0x3c>
 84a:	2c 81       	ldd	r18, Y+4	; 0x04
 84c:	3d 81       	ldd	r19, Y+5	; 0x05
 84e:	21 15       	cp	r18, r1
 850:	31 05       	cpc	r19, r1
 852:	61 f0       	breq	.+24     	; 0x86c <__stack+0xd>
 854:	53 c0       	rjmp	.+166    	; 0x8fc <__stack+0x9d>
 856:	4c 81       	ldd	r20, Y+4	; 0x04
 858:	5d 81       	ldd	r21, Y+5	; 0x05
 85a:	42 30       	cpi	r20, 0x02	; 2
 85c:	51 05       	cpc	r21, r1
 85e:	51 f1       	breq	.+84     	; 0x8b4 <__stack+0x55>
 860:	8c 81       	ldd	r24, Y+4	; 0x04
 862:	9d 81       	ldd	r25, Y+5	; 0x05
 864:	83 30       	cpi	r24, 0x03	; 3
 866:	91 05       	cpc	r25, r1
 868:	b9 f1       	breq	.+110    	; 0x8d8 <__stack+0x79>
 86a:	48 c0       	rjmp	.+144    	; 0x8fc <__stack+0x9d>
	{
		case PORTA: PinValue = GET_BIT(PINA_REG,PIN); break;
 86c:	e9 e3       	ldi	r30, 0x39	; 57
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	80 81       	ld	r24, Z
 872:	28 2f       	mov	r18, r24
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	8b 81       	ldd	r24, Y+3	; 0x03
 878:	88 2f       	mov	r24, r24
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	a9 01       	movw	r20, r18
 87e:	02 c0       	rjmp	.+4      	; 0x884 <__stack+0x25>
 880:	55 95       	asr	r21
 882:	47 95       	ror	r20
 884:	8a 95       	dec	r24
 886:	e2 f7       	brpl	.-8      	; 0x880 <__stack+0x21>
 888:	ca 01       	movw	r24, r20
 88a:	81 70       	andi	r24, 0x01	; 1
 88c:	89 83       	std	Y+1, r24	; 0x01
 88e:	38 c0       	rjmp	.+112    	; 0x900 <__stack+0xa1>
		case PORTB: PinValue = GET_BIT(PINB_REG,PIN); break;
 890:	e6 e3       	ldi	r30, 0x36	; 54
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	80 81       	ld	r24, Z
 896:	28 2f       	mov	r18, r24
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	8b 81       	ldd	r24, Y+3	; 0x03
 89c:	88 2f       	mov	r24, r24
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	a9 01       	movw	r20, r18
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__stack+0x49>
 8a4:	55 95       	asr	r21
 8a6:	47 95       	ror	r20
 8a8:	8a 95       	dec	r24
 8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <__stack+0x45>
 8ac:	ca 01       	movw	r24, r20
 8ae:	81 70       	andi	r24, 0x01	; 1
 8b0:	89 83       	std	Y+1, r24	; 0x01
 8b2:	26 c0       	rjmp	.+76     	; 0x900 <__stack+0xa1>
		case PORTC: PinValue = GET_BIT(PINC_REG,PIN); break;
 8b4:	e3 e3       	ldi	r30, 0x33	; 51
 8b6:	f0 e0       	ldi	r31, 0x00	; 0
 8b8:	80 81       	ld	r24, Z
 8ba:	28 2f       	mov	r18, r24
 8bc:	30 e0       	ldi	r19, 0x00	; 0
 8be:	8b 81       	ldd	r24, Y+3	; 0x03
 8c0:	88 2f       	mov	r24, r24
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	a9 01       	movw	r20, r18
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__stack+0x6d>
 8c8:	55 95       	asr	r21
 8ca:	47 95       	ror	r20
 8cc:	8a 95       	dec	r24
 8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <__stack+0x69>
 8d0:	ca 01       	movw	r24, r20
 8d2:	81 70       	andi	r24, 0x01	; 1
 8d4:	89 83       	std	Y+1, r24	; 0x01
 8d6:	14 c0       	rjmp	.+40     	; 0x900 <__stack+0xa1>
		case PORTD: PinValue = GET_BIT(PIND_REG,PIN); break;
 8d8:	e0 e3       	ldi	r30, 0x30	; 48
 8da:	f0 e0       	ldi	r31, 0x00	; 0
 8dc:	80 81       	ld	r24, Z
 8de:	28 2f       	mov	r18, r24
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	8b 81       	ldd	r24, Y+3	; 0x03
 8e4:	88 2f       	mov	r24, r24
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	a9 01       	movw	r20, r18
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <__stack+0x91>
 8ec:	55 95       	asr	r21
 8ee:	47 95       	ror	r20
 8f0:	8a 95       	dec	r24
 8f2:	e2 f7       	brpl	.-8      	; 0x8ec <__stack+0x8d>
 8f4:	ca 01       	movw	r24, r20
 8f6:	81 70       	andi	r24, 0x01	; 1
 8f8:	89 83       	std	Y+1, r24	; 0x01
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <__stack+0xa1>
		default:PinValue=DIO_CHOISE_NOT_FOUND;//error
 8fc:	85 e0       	ldi	r24, 0x05	; 5
 8fe:	89 83       	std	Y+1, r24	; 0x01
			break;
	}//switch
	return PinValue;
 900:	89 81       	ldd	r24, Y+1	; 0x01
}//function
 902:	0f 90       	pop	r0
 904:	0f 90       	pop	r0
 906:	0f 90       	pop	r0
 908:	0f 90       	pop	r0
 90a:	0f 90       	pop	r0
 90c:	cf 91       	pop	r28
 90e:	df 91       	pop	r29
 910:	08 95       	ret

00000912 <DIO_Getau8_PORTValue>:
uint8_t DIO_Getau8_PORTValue(uint8_t au8_PORT)
{
 912:	df 93       	push	r29
 914:	cf 93       	push	r28
 916:	00 d0       	rcall	.+0      	; 0x918 <DIO_Getau8_PORTValue+0x6>
 918:	00 d0       	rcall	.+0      	; 0x91a <DIO_Getau8_PORTValue+0x8>
 91a:	cd b7       	in	r28, 0x3d	; 61
 91c:	de b7       	in	r29, 0x3e	; 62
 91e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t PinValue;
	switch(au8_PORT)
 920:	8a 81       	ldd	r24, Y+2	; 0x02
 922:	28 2f       	mov	r18, r24
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	3c 83       	std	Y+4, r19	; 0x04
 928:	2b 83       	std	Y+3, r18	; 0x03
 92a:	8b 81       	ldd	r24, Y+3	; 0x03
 92c:	9c 81       	ldd	r25, Y+4	; 0x04
 92e:	81 30       	cpi	r24, 0x01	; 1
 930:	91 05       	cpc	r25, r1
 932:	d1 f0       	breq	.+52     	; 0x968 <DIO_Getau8_PORTValue+0x56>
 934:	2b 81       	ldd	r18, Y+3	; 0x03
 936:	3c 81       	ldd	r19, Y+4	; 0x04
 938:	22 30       	cpi	r18, 0x02	; 2
 93a:	31 05       	cpc	r19, r1
 93c:	2c f4       	brge	.+10     	; 0x948 <DIO_Getau8_PORTValue+0x36>
 93e:	8b 81       	ldd	r24, Y+3	; 0x03
 940:	9c 81       	ldd	r25, Y+4	; 0x04
 942:	00 97       	sbiw	r24, 0x00	; 0
 944:	61 f0       	breq	.+24     	; 0x95e <DIO_Getau8_PORTValue+0x4c>
 946:	1f c0       	rjmp	.+62     	; 0x986 <DIO_Getau8_PORTValue+0x74>
 948:	2b 81       	ldd	r18, Y+3	; 0x03
 94a:	3c 81       	ldd	r19, Y+4	; 0x04
 94c:	22 30       	cpi	r18, 0x02	; 2
 94e:	31 05       	cpc	r19, r1
 950:	81 f0       	breq	.+32     	; 0x972 <DIO_Getau8_PORTValue+0x60>
 952:	8b 81       	ldd	r24, Y+3	; 0x03
 954:	9c 81       	ldd	r25, Y+4	; 0x04
 956:	83 30       	cpi	r24, 0x03	; 3
 958:	91 05       	cpc	r25, r1
 95a:	81 f0       	breq	.+32     	; 0x97c <DIO_Getau8_PORTValue+0x6a>
 95c:	14 c0       	rjmp	.+40     	; 0x986 <DIO_Getau8_PORTValue+0x74>
	{
		case PORTA: PinValue =*((uint8_t*)0x39); break;
 95e:	e9 e3       	ldi	r30, 0x39	; 57
 960:	f0 e0       	ldi	r31, 0x00	; 0
 962:	80 81       	ld	r24, Z
 964:	89 83       	std	Y+1, r24	; 0x01
 966:	11 c0       	rjmp	.+34     	; 0x98a <DIO_Getau8_PORTValue+0x78>
		case PORTB: PinValue =*((uint8_t *)0x36); break;
 968:	e6 e3       	ldi	r30, 0x36	; 54
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	80 81       	ld	r24, Z
 96e:	89 83       	std	Y+1, r24	; 0x01
 970:	0c c0       	rjmp	.+24     	; 0x98a <DIO_Getau8_PORTValue+0x78>
		case PORTC: PinValue =*((uint8_t*)0x33); break;
 972:	e3 e3       	ldi	r30, 0x33	; 51
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	80 81       	ld	r24, Z
 978:	89 83       	std	Y+1, r24	; 0x01
 97a:	07 c0       	rjmp	.+14     	; 0x98a <DIO_Getau8_PORTValue+0x78>
		case PORTD: PinValue =*((uint8_t*)0x30); break;
 97c:	e0 e3       	ldi	r30, 0x30	; 48
 97e:	f0 e0       	ldi	r31, 0x00	; 0
 980:	80 81       	ld	r24, Z
 982:	89 83       	std	Y+1, r24	; 0x01
 984:	02 c0       	rjmp	.+4      	; 0x98a <DIO_Getau8_PORTValue+0x78>
		default:PinValue=DIO_CHOISE_NOT_FOUND;//error
 986:	85 e0       	ldi	r24, 0x05	; 5
 988:	89 83       	std	Y+1, r24	; 0x01
			break;
	}//switch
	return PinValue;
 98a:	89 81       	ldd	r24, Y+1	; 0x01
}
 98c:	0f 90       	pop	r0
 98e:	0f 90       	pop	r0
 990:	0f 90       	pop	r0
 992:	0f 90       	pop	r0
 994:	cf 91       	pop	r28
 996:	df 91       	pop	r29
 998:	08 95       	ret

0000099a <GIE_voidEnable>:
#include "GIE_privet.h"



void GIE_voidEnable(void)
{
 99a:	df 93       	push	r29
 99c:	cf 93       	push	r28
 99e:	cd b7       	in	r28, 0x3d	; 61
 9a0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , SREG_I);
 9a2:	af e5       	ldi	r26, 0x5F	; 95
 9a4:	b0 e0       	ldi	r27, 0x00	; 0
 9a6:	ef e5       	ldi	r30, 0x5F	; 95
 9a8:	f0 e0       	ldi	r31, 0x00	; 0
 9aa:	80 81       	ld	r24, Z
 9ac:	80 68       	ori	r24, 0x80	; 128
 9ae:	8c 93       	st	X, r24
}
 9b0:	cf 91       	pop	r28
 9b2:	df 91       	pop	r29
 9b4:	08 95       	ret

000009b6 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
 9b6:	df 93       	push	r29
 9b8:	cf 93       	push	r28
 9ba:	cd b7       	in	r28, 0x3d	; 61
 9bc:	de b7       	in	r29, 0x3e	; 62
	
	CLR_BIT( SREG , SREG_I);
 9be:	af e5       	ldi	r26, 0x5F	; 95
 9c0:	b0 e0       	ldi	r27, 0x00	; 0
 9c2:	ef e5       	ldi	r30, 0x5F	; 95
 9c4:	f0 e0       	ldi	r31, 0x00	; 0
 9c6:	80 81       	ld	r24, Z
 9c8:	8f 77       	andi	r24, 0x7F	; 127
 9ca:	8c 93       	st	X, r24
	
}
 9cc:	cf 91       	pop	r28
 9ce:	df 91       	pop	r29
 9d0:	08 95       	ret

000009d2 <timer_callback>:
uint32_t Ton=0,T=0;

void (*gcallBack)(void)=NULL;

void timer_callback(void(*CallBack)(void))
{
 9d2:	df 93       	push	r29
 9d4:	cf 93       	push	r28
 9d6:	00 d0       	rcall	.+0      	; 0x9d8 <timer_callback+0x6>
 9d8:	cd b7       	in	r28, 0x3d	; 61
 9da:	de b7       	in	r29, 0x3e	; 62
 9dc:	9a 83       	std	Y+2, r25	; 0x02
 9de:	89 83       	std	Y+1, r24	; 0x01
	gcallBack =CallBack ;
 9e0:	89 81       	ldd	r24, Y+1	; 0x01
 9e2:	9a 81       	ldd	r25, Y+2	; 0x02
 9e4:	90 93 6d 00 	sts	0x006D, r25
 9e8:	80 93 6c 00 	sts	0x006C, r24
}
 9ec:	0f 90       	pop	r0
 9ee:	0f 90       	pop	r0
 9f0:	cf 91       	pop	r28
 9f2:	df 91       	pop	r29
 9f4:	08 95       	ret

000009f6 <Pre_Load_Value>:

void Pre_Load_Value(uint8_t au8_Pre_load_value)
{
 9f6:	df 93       	push	r29
 9f8:	cf 93       	push	r28
 9fa:	0f 92       	push	r0
 9fc:	cd b7       	in	r28, 0x3d	; 61
 9fe:	de b7       	in	r29, 0x3e	; 62
 a00:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 =au8_Pre_load_value ;
 a02:	e2 e5       	ldi	r30, 0x52	; 82
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	89 81       	ldd	r24, Y+1	; 0x01
 a08:	80 83       	st	Z, r24

}
 a0a:	0f 90       	pop	r0
 a0c:	cf 91       	pop	r28
 a0e:	df 91       	pop	r29
 a10:	08 95       	ret

00000a12 <Timer0_Voidint>:


void Timer0_Voidint(void)
{
 a12:	df 93       	push	r29
 a14:	cf 93       	push	r28
 a16:	cd b7       	in	r28, 0x3d	; 61
 a18:	de b7       	in	r29, 0x3e	; 62
	/* TIMER0_SELECT_MODE*/

	#if TIMER0_SELECT_MODE == NORMAL_MODE

	   /*SELECT NORMALMOD (0V)*/
		     CLR_BIT(TCCR0,WGM01);
 a1a:	a3 e5       	ldi	r26, 0x53	; 83
 a1c:	b0 e0       	ldi	r27, 0x00	; 0
 a1e:	e3 e5       	ldi	r30, 0x53	; 83
 a20:	f0 e0       	ldi	r31, 0x00	; 0
 a22:	80 81       	ld	r24, Z
 a24:	87 7f       	andi	r24, 0xF7	; 247
 a26:	8c 93       	st	X, r24
		     CLR_BIT(TCCR0,WGM00);
 a28:	a3 e5       	ldi	r26, 0x53	; 83
 a2a:	b0 e0       	ldi	r27, 0x00	; 0
 a2c:	e3 e5       	ldi	r30, 0x53	; 83
 a2e:	f0 e0       	ldi	r31, 0x00	; 0
 a30:	80 81       	ld	r24, Z
 a32:	8f 7b       	andi	r24, 0xBF	; 191
 a34:	8c 93       	st	X, r24
#elif TIMER0_PRESCALER_SELECTION ==  CLK_SOURCE_256
	     CLR_BIT(TCCR0,CS00);
	     CLR_BIT(TCCR0,CS01);
	     SET_BIT(TCCR0,CS02);
#elif TIMER0_PRESCALER_SELECTION ==  CLK_SOURCE_1024
	     SET_BIT(TCCR0,CS00);
 a36:	a3 e5       	ldi	r26, 0x53	; 83
 a38:	b0 e0       	ldi	r27, 0x00	; 0
 a3a:	e3 e5       	ldi	r30, 0x53	; 83
 a3c:	f0 e0       	ldi	r31, 0x00	; 0
 a3e:	80 81       	ld	r24, Z
 a40:	81 60       	ori	r24, 0x01	; 1
 a42:	8c 93       	st	X, r24
	     CLR_BIT(TCCR0,CS01);
 a44:	a3 e5       	ldi	r26, 0x53	; 83
 a46:	b0 e0       	ldi	r27, 0x00	; 0
 a48:	e3 e5       	ldi	r30, 0x53	; 83
 a4a:	f0 e0       	ldi	r31, 0x00	; 0
 a4c:	80 81       	ld	r24, Z
 a4e:	8d 7f       	andi	r24, 0xFD	; 253
 a50:	8c 93       	st	X, r24
	     SET_BIT(TCCR0,CS02);
 a52:	a3 e5       	ldi	r26, 0x53	; 83
 a54:	b0 e0       	ldi	r27, 0x00	; 0
 a56:	e3 e5       	ldi	r30, 0x53	; 83
 a58:	f0 e0       	ldi	r31, 0x00	; 0
 a5a:	80 81       	ld	r24, Z
 a5c:	84 60       	ori	r24, 0x04	; 4
 a5e:	8c 93       	st	X, r24

	    /*OVER FLOW INTURRPT*/
#if TIMER0_OVF_INTURRPTS == DISABLE
	     CLR_BIT(TIMSK,TOIEO);
#elif  	 TIMER0_OVF_INTURRPTS == ENABLE
	     SET_BIT(TIMSK,TOIEO);
 a60:	a9 e5       	ldi	r26, 0x59	; 89
 a62:	b0 e0       	ldi	r27, 0x00	; 0
 a64:	e9 e5       	ldi	r30, 0x59	; 89
 a66:	f0 e0       	ldi	r31, 0x00	; 0
 a68:	80 81       	ld	r24, Z
 a6a:	81 60       	ori	r24, 0x01	; 1
 a6c:	8c 93       	st	X, r24

#endif
}
 a6e:	cf 91       	pop	r28
 a70:	df 91       	pop	r29
 a72:	08 95       	ret

00000a74 <Timer0_VoidintDutyCycle>:




void Timer0_VoidintDutyCycle(uint8_t au8_Copy_Duty){
 a74:	df 93       	push	r29
 a76:	cf 93       	push	r28
 a78:	0f 92       	push	r0
 a7a:	cd b7       	in	r28, 0x3d	; 61
 a7c:	de b7       	in	r29, 0x3e	; 62
 a7e:	89 83       	std	Y+1, r24	; 0x01

	OCR0=au8_Copy_Duty;
 a80:	ec e5       	ldi	r30, 0x5C	; 92
 a82:	f0 e0       	ldi	r31, 0x00	; 0
 a84:	89 81       	ldd	r24, Y+1	; 0x01
 a86:	80 83       	st	Z, r24
}
 a88:	0f 90       	pop	r0
 a8a:	cf 91       	pop	r28
 a8c:	df 91       	pop	r29
 a8e:	08 95       	ret

00000a90 <Timer0_delay>:


void Timer0_delay(uint8_t au8_Timeout)
{
 a90:	df 93       	push	r29
 a92:	cf 93       	push	r28
 a94:	00 d0       	rcall	.+0      	; 0xa96 <Timer0_delay+0x6>
 a96:	cd b7       	in	r28, 0x3d	; 61
 a98:	de b7       	in	r29, 0x3e	; 62
 a9a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_counter=0;
 a9c:	19 82       	std	Y+1, r1	; 0x01
 a9e:	0e c0       	rjmp	.+28     	; 0xabc <Timer0_delay+0x2c>
    while( GET_BIT(TIFR ,TOV0)==0)
    {
    	SET_BIT(TIFR ,TOV0);
 aa0:	a8 e5       	ldi	r26, 0x58	; 88
 aa2:	b0 e0       	ldi	r27, 0x00	; 0
 aa4:	e8 e5       	ldi	r30, 0x58	; 88
 aa6:	f0 e0       	ldi	r31, 0x00	; 0
 aa8:	80 81       	ld	r24, Z
 aaa:	81 60       	ori	r24, 0x01	; 1
 aac:	8c 93       	st	X, r24
    	au8_counter++;
 aae:	89 81       	ldd	r24, Y+1	; 0x01
 ab0:	8f 5f       	subi	r24, 0xFF	; 255
 ab2:	89 83       	std	Y+1, r24	; 0x01
         if(au8_counter == au8_Timeout)
 ab4:	99 81       	ldd	r25, Y+1	; 0x01
 ab6:	8a 81       	ldd	r24, Y+2	; 0x02
 ab8:	98 17       	cp	r25, r24
 aba:	49 f0       	breq	.+18     	; 0xace <Timer0_delay+0x3e>


void Timer0_delay(uint8_t au8_Timeout)
{
	uint8_t au8_counter=0;
    while( GET_BIT(TIFR ,TOV0)==0)
 abc:	e8 e5       	ldi	r30, 0x58	; 88
 abe:	f0 e0       	ldi	r31, 0x00	; 0
 ac0:	80 81       	ld	r24, Z
 ac2:	88 2f       	mov	r24, r24
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	81 70       	andi	r24, 0x01	; 1
 ac8:	90 70       	andi	r25, 0x00	; 0
 aca:	00 97       	sbiw	r24, 0x00	; 0
 acc:	49 f3       	breq	.-46     	; 0xaa0 <Timer0_delay+0x10>
    	au8_counter++;
         if(au8_counter == au8_Timeout)
        	 break;
    }

}
 ace:	0f 90       	pop	r0
 ad0:	0f 90       	pop	r0
 ad2:	cf 91       	pop	r28
 ad4:	df 91       	pop	r29
 ad6:	08 95       	ret

00000ad8 <__vector_11>:


void __vector_11(void) __attribute__((signal));

void __vector_11(void)
{
 ad8:	1f 92       	push	r1
 ada:	0f 92       	push	r0
 adc:	0f b6       	in	r0, 0x3f	; 63
 ade:	0f 92       	push	r0
 ae0:	11 24       	eor	r1, r1
 ae2:	2f 93       	push	r18
 ae4:	3f 93       	push	r19
 ae6:	4f 93       	push	r20
 ae8:	5f 93       	push	r21
 aea:	6f 93       	push	r22
 aec:	7f 93       	push	r23
 aee:	8f 93       	push	r24
 af0:	9f 93       	push	r25
 af2:	af 93       	push	r26
 af4:	bf 93       	push	r27
 af6:	ef 93       	push	r30
 af8:	ff 93       	push	r31
 afa:	df 93       	push	r29
 afc:	cf 93       	push	r28
 afe:	cd b7       	in	r28, 0x3d	; 61
 b00:	de b7       	in	r29, 0x3e	; 62
	if (gcallBack!=NULL )
 b02:	80 91 6c 00 	lds	r24, 0x006C
 b06:	90 91 6d 00 	lds	r25, 0x006D
 b0a:	00 97       	sbiw	r24, 0x00	; 0
 b0c:	29 f0       	breq	.+10     	; 0xb18 <__vector_11+0x40>
	{
		gcallBack();
 b0e:	e0 91 6c 00 	lds	r30, 0x006C
 b12:	f0 91 6d 00 	lds	r31, 0x006D
 b16:	09 95       	icall
	}
	else{
		/*do nothing*/
	    }

}
 b18:	cf 91       	pop	r28
 b1a:	df 91       	pop	r29
 b1c:	ff 91       	pop	r31
 b1e:	ef 91       	pop	r30
 b20:	bf 91       	pop	r27
 b22:	af 91       	pop	r26
 b24:	9f 91       	pop	r25
 b26:	8f 91       	pop	r24
 b28:	7f 91       	pop	r23
 b2a:	6f 91       	pop	r22
 b2c:	5f 91       	pop	r21
 b2e:	4f 91       	pop	r20
 b30:	3f 91       	pop	r19
 b32:	2f 91       	pop	r18
 b34:	0f 90       	pop	r0
 b36:	0f be       	out	0x3f, r0	; 63
 b38:	0f 90       	pop	r0
 b3a:	1f 90       	pop	r1
 b3c:	18 95       	reti

00000b3e <__vector_10>:


void __vector_10(void) __attribute__((signal));

void __vector_10(void)
{
 b3e:	1f 92       	push	r1
 b40:	0f 92       	push	r0
 b42:	0f b6       	in	r0, 0x3f	; 63
 b44:	0f 92       	push	r0
 b46:	11 24       	eor	r1, r1
 b48:	2f 93       	push	r18
 b4a:	3f 93       	push	r19
 b4c:	4f 93       	push	r20
 b4e:	5f 93       	push	r21
 b50:	6f 93       	push	r22
 b52:	7f 93       	push	r23
 b54:	8f 93       	push	r24
 b56:	9f 93       	push	r25
 b58:	af 93       	push	r26
 b5a:	bf 93       	push	r27
 b5c:	ef 93       	push	r30
 b5e:	ff 93       	push	r31
 b60:	df 93       	push	r29
 b62:	cf 93       	push	r28
 b64:	cd b7       	in	r28, 0x3d	; 61
 b66:	de b7       	in	r29, 0x3e	; 62
	static uint8_t counter=0;
	counter++;
 b68:	80 91 6e 00 	lds	r24, 0x006E
 b6c:	8f 5f       	subi	r24, 0xFF	; 255
 b6e:	80 93 6e 00 	sts	0x006E, r24

if(counter==123)
 b72:	80 91 6e 00 	lds	r24, 0x006E
 b76:	8b 37       	cpi	r24, 0x7B	; 123
 b78:	51 f4       	brne	.+20     	; 0xb8e <__vector_10+0x50>
{
	TCNT0=TIMER0_PreLoad;
 b7a:	e2 e5       	ldi	r30, 0x52	; 82
 b7c:	f0 e0       	ldi	r31, 0x00	; 0
 b7e:	81 e6       	ldi	r24, 0x61	; 97
 b80:	80 83       	st	Z, r24
	DIO_TogPinValue(PORTB, PIN0);
 b82:	81 e0       	ldi	r24, 0x01	; 1
 b84:	60 e0       	ldi	r22, 0x00	; 0
 b86:	0e 94 71 02 	call	0x4e2	; 0x4e2 <DIO_TogPinValue>
	counter=0;
 b8a:	10 92 6e 00 	sts	0x006E, r1
}


}
 b8e:	cf 91       	pop	r28
 b90:	df 91       	pop	r29
 b92:	ff 91       	pop	r31
 b94:	ef 91       	pop	r30
 b96:	bf 91       	pop	r27
 b98:	af 91       	pop	r26
 b9a:	9f 91       	pop	r25
 b9c:	8f 91       	pop	r24
 b9e:	7f 91       	pop	r23
 ba0:	6f 91       	pop	r22
 ba2:	5f 91       	pop	r21
 ba4:	4f 91       	pop	r20
 ba6:	3f 91       	pop	r19
 ba8:	2f 91       	pop	r18
 baa:	0f 90       	pop	r0
 bac:	0f be       	out	0x3f, r0	; 63
 bae:	0f 90       	pop	r0
 bb0:	1f 90       	pop	r1
 bb2:	18 95       	reti

00000bb4 <_exit>:
 bb4:	f8 94       	cli

00000bb6 <__stop_program>:
 bb6:	ff cf       	rjmp	.-2      	; 0xbb6 <__stop_program>
