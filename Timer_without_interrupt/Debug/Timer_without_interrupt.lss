
Timer_without_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b1c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000e  00800060  00800060  00000b90  2**0
                  ALLOC
  2 .stab         00000e10  00000000  00000000  00000b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000687  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__vector_10>
  2c:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ae 36       	cpi	r26, 0x6E	; 110
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "DIO_interface.h"
#include "timer0_interface.h"
#include "GIE_interface.h"
#include "delay_interface.h"
void main ()
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	  /*some peripheral initialization  */

	DIO_SetPinDirection(PORTB , PIN4 , OUTPUT);
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	64 e0       	ldi	r22, 0x04	; 4
  88:	41 e0       	ldi	r20, 0x01	; 1
  8a:	0e 94 58 00 	call	0xb0	; 0xb0 <DIO_SetPinDirection>

	while(1)
	{
		DIO_SetPinValue(PORTB,PIN4,HIGH);
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	64 e0       	ldi	r22, 0x04	; 4
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_SetPinValue>
		Delay(9);
  98:	89 e0       	ldi	r24, 0x09	; 9
  9a:	0e 94 8e 04 	call	0x91c	; 0x91c <Delay>
		DIO_SetPinValue(PORTB,PIN4,LOW);
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	64 e0       	ldi	r22, 0x04	; 4
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_SetPinValue>
		Delay(15);
  a8:	8f e0       	ldi	r24, 0x0F	; 15
  aa:	0e 94 8e 04 	call	0x91c	; 0x91c <Delay>
  ae:	ef cf       	rjmp	.-34     	; 0x8e <main+0x12>

000000b0 <DIO_SetPinDirection>:

#include "DIO_private.h"
#include "DIO_private.h"

void DIO_SetPinDirection(uint_8 au8_PORT , uint_8 au8_PIN , uint_8 au8_DIRECTION)
{
  b0:	df 93       	push	r29
  b2:	cf 93       	push	r28
  b4:	00 d0       	rcall	.+0      	; 0xb6 <DIO_SetPinDirection+0x6>
  b6:	00 d0       	rcall	.+0      	; 0xb8 <DIO_SetPinDirection+0x8>
  b8:	0f 92       	push	r0
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	89 83       	std	Y+1, r24	; 0x01
  c0:	6a 83       	std	Y+2, r22	; 0x02
  c2:	4b 83       	std	Y+3, r20	; 0x03
	switch (au8_PORT)
  c4:	89 81       	ldd	r24, Y+1	; 0x01
  c6:	28 2f       	mov	r18, r24
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	3d 83       	std	Y+5, r19	; 0x05
  cc:	2c 83       	std	Y+4, r18	; 0x04
  ce:	8c 81       	ldd	r24, Y+4	; 0x04
  d0:	9d 81       	ldd	r25, Y+5	; 0x05
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	91 05       	cpc	r25, r1
  d6:	09 f4       	brne	.+2      	; 0xda <DIO_SetPinDirection+0x2a>
  d8:	47 c0       	rjmp	.+142    	; 0x168 <DIO_SetPinDirection+0xb8>
  da:	2c 81       	ldd	r18, Y+4	; 0x04
  dc:	3d 81       	ldd	r19, Y+5	; 0x05
  de:	22 30       	cpi	r18, 0x02	; 2
  e0:	31 05       	cpc	r19, r1
  e2:	2c f4       	brge	.+10     	; 0xee <DIO_SetPinDirection+0x3e>
  e4:	8c 81       	ldd	r24, Y+4	; 0x04
  e6:	9d 81       	ldd	r25, Y+5	; 0x05
  e8:	00 97       	sbiw	r24, 0x00	; 0
  ea:	71 f0       	breq	.+28     	; 0x108 <DIO_SetPinDirection+0x58>
  ec:	cb c0       	rjmp	.+406    	; 0x284 <DIO_SetPinDirection+0x1d4>
  ee:	2c 81       	ldd	r18, Y+4	; 0x04
  f0:	3d 81       	ldd	r19, Y+5	; 0x05
  f2:	22 30       	cpi	r18, 0x02	; 2
  f4:	31 05       	cpc	r19, r1
  f6:	09 f4       	brne	.+2      	; 0xfa <DIO_SetPinDirection+0x4a>
  f8:	67 c0       	rjmp	.+206    	; 0x1c8 <DIO_SetPinDirection+0x118>
  fa:	8c 81       	ldd	r24, Y+4	; 0x04
  fc:	9d 81       	ldd	r25, Y+5	; 0x05
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	91 05       	cpc	r25, r1
 102:	09 f4       	brne	.+2      	; 0x106 <DIO_SetPinDirection+0x56>
 104:	91 c0       	rjmp	.+290    	; 0x228 <DIO_SetPinDirection+0x178>
 106:	be c0       	rjmp	.+380    	; 0x284 <DIO_SetPinDirection+0x1d4>
	{
		case PORTA: if (au8_DIRECTION==INPUT)
 108:	8b 81       	ldd	r24, Y+3	; 0x03
 10a:	88 23       	and	r24, r24
 10c:	a9 f4       	brne	.+42     	; 0x138 <DIO_SetPinDirection+0x88>
					{
						CLR_BIT(DDRA_REG,au8_PIN);
 10e:	aa e3       	ldi	r26, 0x3A	; 58
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	ea e3       	ldi	r30, 0x3A	; 58
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	48 2f       	mov	r20, r24
 11a:	8a 81       	ldd	r24, Y+2	; 0x02
 11c:	28 2f       	mov	r18, r24
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 2e       	mov	r0, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_SetPinDirection+0x7c>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_SetPinDirection+0x78>
 130:	80 95       	com	r24
 132:	84 23       	and	r24, r20
 134:	8c 93       	st	X, r24
 136:	a6 c0       	rjmp	.+332    	; 0x284 <DIO_SetPinDirection+0x1d4>
					}
					else if(au8_DIRECTION==OUTPUT)
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	09 f0       	breq	.+2      	; 0x140 <DIO_SetPinDirection+0x90>
 13e:	a2 c0       	rjmp	.+324    	; 0x284 <DIO_SetPinDirection+0x1d4>
					{
						SET_BIT(DDRA_REG,au8_PIN);
 140:	aa e3       	ldi	r26, 0x3A	; 58
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	ea e3       	ldi	r30, 0x3A	; 58
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	48 2f       	mov	r20, r24
 14c:	8a 81       	ldd	r24, Y+2	; 0x02
 14e:	28 2f       	mov	r18, r24
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 2e       	mov	r0, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_SetPinDirection+0xae>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_SetPinDirection+0xaa>
 162:	84 2b       	or	r24, r20
 164:	8c 93       	st	X, r24
 166:	8e c0       	rjmp	.+284    	; 0x284 <DIO_SetPinDirection+0x1d4>
					else
					{
						//do noting
					}
					break;
		case PORTB: if (au8_DIRECTION==INPUT)
 168:	8b 81       	ldd	r24, Y+3	; 0x03
 16a:	88 23       	and	r24, r24
 16c:	a9 f4       	brne	.+42     	; 0x198 <DIO_SetPinDirection+0xe8>
					{
						CLR_BIT(DDRB_REG,au8_PIN);
 16e:	a7 e3       	ldi	r26, 0x37	; 55
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	e7 e3       	ldi	r30, 0x37	; 55
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	48 2f       	mov	r20, r24
 17a:	8a 81       	ldd	r24, Y+2	; 0x02
 17c:	28 2f       	mov	r18, r24
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 2e       	mov	r0, r18
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_SetPinDirection+0xdc>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	0a 94       	dec	r0
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_SetPinDirection+0xd8>
 190:	80 95       	com	r24
 192:	84 23       	and	r24, r20
 194:	8c 93       	st	X, r24
 196:	76 c0       	rjmp	.+236    	; 0x284 <DIO_SetPinDirection+0x1d4>
					}
					else if(au8_DIRECTION==OUTPUT)
 198:	8b 81       	ldd	r24, Y+3	; 0x03
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	09 f0       	breq	.+2      	; 0x1a0 <DIO_SetPinDirection+0xf0>
 19e:	72 c0       	rjmp	.+228    	; 0x284 <DIO_SetPinDirection+0x1d4>
					{
						SET_BIT(DDRB_REG,au8_PIN);
 1a0:	a7 e3       	ldi	r26, 0x37	; 55
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	e7 e3       	ldi	r30, 0x37	; 55
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	48 2f       	mov	r20, r24
 1ac:	8a 81       	ldd	r24, Y+2	; 0x02
 1ae:	28 2f       	mov	r18, r24
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 2e       	mov	r0, r18
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_SetPinDirection+0x10e>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	0a 94       	dec	r0
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_SetPinDirection+0x10a>
 1c2:	84 2b       	or	r24, r20
 1c4:	8c 93       	st	X, r24
 1c6:	5e c0       	rjmp	.+188    	; 0x284 <DIO_SetPinDirection+0x1d4>
					else
					{
						//do noting
					}
					break;
		case PORTC: if (au8_DIRECTION==INPUT)
 1c8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ca:	88 23       	and	r24, r24
 1cc:	a9 f4       	brne	.+42     	; 0x1f8 <DIO_SetPinDirection+0x148>
					{
						CLR_BIT(DDRC_REG,au8_PIN);
 1ce:	a4 e3       	ldi	r26, 0x34	; 52
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
 1d2:	e4 e3       	ldi	r30, 0x34	; 52
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	48 2f       	mov	r20, r24
 1da:	8a 81       	ldd	r24, Y+2	; 0x02
 1dc:	28 2f       	mov	r18, r24
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 2e       	mov	r0, r18
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_SetPinDirection+0x13c>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	0a 94       	dec	r0
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_SetPinDirection+0x138>
 1f0:	80 95       	com	r24
 1f2:	84 23       	and	r24, r20
 1f4:	8c 93       	st	X, r24
 1f6:	46 c0       	rjmp	.+140    	; 0x284 <DIO_SetPinDirection+0x1d4>
					}
					else if(au8_DIRECTION==OUTPUT)
 1f8:	8b 81       	ldd	r24, Y+3	; 0x03
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	09 f0       	breq	.+2      	; 0x200 <DIO_SetPinDirection+0x150>
 1fe:	42 c0       	rjmp	.+132    	; 0x284 <DIO_SetPinDirection+0x1d4>
					{
						SET_BIT(DDRC_REG,au8_PIN);
 200:	a4 e3       	ldi	r26, 0x34	; 52
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	e4 e3       	ldi	r30, 0x34	; 52
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	48 2f       	mov	r20, r24
 20c:	8a 81       	ldd	r24, Y+2	; 0x02
 20e:	28 2f       	mov	r18, r24
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 2e       	mov	r0, r18
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_SetPinDirection+0x16e>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	0a 94       	dec	r0
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_SetPinDirection+0x16a>
 222:	84 2b       	or	r24, r20
 224:	8c 93       	st	X, r24
 226:	2e c0       	rjmp	.+92     	; 0x284 <DIO_SetPinDirection+0x1d4>
					else
					{
						//do noting
					}
					break;
		case PORTD: if (au8_DIRECTION==INPUT)
 228:	8b 81       	ldd	r24, Y+3	; 0x03
 22a:	88 23       	and	r24, r24
 22c:	a9 f4       	brne	.+42     	; 0x258 <DIO_SetPinDirection+0x1a8>
					{
						CLR_BIT(DDRD_REG,au8_PIN);
 22e:	a1 e3       	ldi	r26, 0x31	; 49
 230:	b0 e0       	ldi	r27, 0x00	; 0
 232:	e1 e3       	ldi	r30, 0x31	; 49
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	48 2f       	mov	r20, r24
 23a:	8a 81       	ldd	r24, Y+2	; 0x02
 23c:	28 2f       	mov	r18, r24
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 2e       	mov	r0, r18
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_SetPinDirection+0x19c>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	0a 94       	dec	r0
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_SetPinDirection+0x198>
 250:	80 95       	com	r24
 252:	84 23       	and	r24, r20
 254:	8c 93       	st	X, r24
 256:	16 c0       	rjmp	.+44     	; 0x284 <DIO_SetPinDirection+0x1d4>
					}
					else if(au8_DIRECTION==OUTPUT)
 258:	8b 81       	ldd	r24, Y+3	; 0x03
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	99 f4       	brne	.+38     	; 0x284 <DIO_SetPinDirection+0x1d4>
					{
						SET_BIT(DDRD_REG,au8_PIN);
 25e:	a1 e3       	ldi	r26, 0x31	; 49
 260:	b0 e0       	ldi	r27, 0x00	; 0
 262:	e1 e3       	ldi	r30, 0x31	; 49
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	48 2f       	mov	r20, r24
 26a:	8a 81       	ldd	r24, Y+2	; 0x02
 26c:	28 2f       	mov	r18, r24
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 2e       	mov	r0, r18
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_SetPinDirection+0x1cc>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	0a 94       	dec	r0
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_SetPinDirection+0x1c8>
 280:	84 2b       	or	r24, r20
 282:	8c 93       	st	X, r24
					}
					break;
		default://error
			break;
	}//switch
}//function
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	cf 91       	pop	r28
 290:	df 91       	pop	r29
 292:	08 95       	ret

00000294 <DIO_SetPinValue>:
void DIO_SetPinValue(uint_8 au8_PORT , uint_8 au8_PIN , uint_8 au8_VALUE)
{
 294:	df 93       	push	r29
 296:	cf 93       	push	r28
 298:	00 d0       	rcall	.+0      	; 0x29a <DIO_SetPinValue+0x6>
 29a:	00 d0       	rcall	.+0      	; 0x29c <DIO_SetPinValue+0x8>
 29c:	0f 92       	push	r0
 29e:	cd b7       	in	r28, 0x3d	; 61
 2a0:	de b7       	in	r29, 0x3e	; 62
 2a2:	89 83       	std	Y+1, r24	; 0x01
 2a4:	6a 83       	std	Y+2, r22	; 0x02
 2a6:	4b 83       	std	Y+3, r20	; 0x03
	switch (au8_PORT)
 2a8:	89 81       	ldd	r24, Y+1	; 0x01
 2aa:	28 2f       	mov	r18, r24
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	3d 83       	std	Y+5, r19	; 0x05
 2b0:	2c 83       	std	Y+4, r18	; 0x04
 2b2:	8c 81       	ldd	r24, Y+4	; 0x04
 2b4:	9d 81       	ldd	r25, Y+5	; 0x05
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	91 05       	cpc	r25, r1
 2ba:	09 f4       	brne	.+2      	; 0x2be <DIO_SetPinValue+0x2a>
 2bc:	47 c0       	rjmp	.+142    	; 0x34c <DIO_SetPinValue+0xb8>
 2be:	2c 81       	ldd	r18, Y+4	; 0x04
 2c0:	3d 81       	ldd	r19, Y+5	; 0x05
 2c2:	22 30       	cpi	r18, 0x02	; 2
 2c4:	31 05       	cpc	r19, r1
 2c6:	2c f4       	brge	.+10     	; 0x2d2 <DIO_SetPinValue+0x3e>
 2c8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ca:	9d 81       	ldd	r25, Y+5	; 0x05
 2cc:	00 97       	sbiw	r24, 0x00	; 0
 2ce:	71 f0       	breq	.+28     	; 0x2ec <DIO_SetPinValue+0x58>
 2d0:	cb c0       	rjmp	.+406    	; 0x468 <DIO_SetPinValue+0x1d4>
 2d2:	2c 81       	ldd	r18, Y+4	; 0x04
 2d4:	3d 81       	ldd	r19, Y+5	; 0x05
 2d6:	22 30       	cpi	r18, 0x02	; 2
 2d8:	31 05       	cpc	r19, r1
 2da:	09 f4       	brne	.+2      	; 0x2de <DIO_SetPinValue+0x4a>
 2dc:	67 c0       	rjmp	.+206    	; 0x3ac <DIO_SetPinValue+0x118>
 2de:	8c 81       	ldd	r24, Y+4	; 0x04
 2e0:	9d 81       	ldd	r25, Y+5	; 0x05
 2e2:	83 30       	cpi	r24, 0x03	; 3
 2e4:	91 05       	cpc	r25, r1
 2e6:	09 f4       	brne	.+2      	; 0x2ea <DIO_SetPinValue+0x56>
 2e8:	91 c0       	rjmp	.+290    	; 0x40c <DIO_SetPinValue+0x178>
 2ea:	be c0       	rjmp	.+380    	; 0x468 <DIO_SetPinValue+0x1d4>
		{
			case PORTA: if (au8_VALUE==LOW)
 2ec:	8b 81       	ldd	r24, Y+3	; 0x03
 2ee:	88 23       	and	r24, r24
 2f0:	a9 f4       	brne	.+42     	; 0x31c <DIO_SetPinValue+0x88>
						{
							CLR_BIT(PORTA_REG,au8_PIN);
 2f2:	ab e3       	ldi	r26, 0x3B	; 59
 2f4:	b0 e0       	ldi	r27, 0x00	; 0
 2f6:	eb e3       	ldi	r30, 0x3B	; 59
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	48 2f       	mov	r20, r24
 2fe:	8a 81       	ldd	r24, Y+2	; 0x02
 300:	28 2f       	mov	r18, r24
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 2e       	mov	r0, r18
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_SetPinValue+0x7c>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	0a 94       	dec	r0
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_SetPinValue+0x78>
 314:	80 95       	com	r24
 316:	84 23       	and	r24, r20
 318:	8c 93       	st	X, r24
 31a:	a6 c0       	rjmp	.+332    	; 0x468 <DIO_SetPinValue+0x1d4>
						}
						else if(au8_VALUE==HIGH)
 31c:	8b 81       	ldd	r24, Y+3	; 0x03
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	09 f0       	breq	.+2      	; 0x324 <DIO_SetPinValue+0x90>
 322:	a2 c0       	rjmp	.+324    	; 0x468 <DIO_SetPinValue+0x1d4>
						{
							SET_BIT(PORTA_REG,au8_PIN);
 324:	ab e3       	ldi	r26, 0x3B	; 59
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	eb e3       	ldi	r30, 0x3B	; 59
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	48 2f       	mov	r20, r24
 330:	8a 81       	ldd	r24, Y+2	; 0x02
 332:	28 2f       	mov	r18, r24
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 2e       	mov	r0, r18
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_SetPinValue+0xae>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	0a 94       	dec	r0
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_SetPinValue+0xaa>
 346:	84 2b       	or	r24, r20
 348:	8c 93       	st	X, r24
 34a:	8e c0       	rjmp	.+284    	; 0x468 <DIO_SetPinValue+0x1d4>
						else
						{
							//do noting
						}
						break;
			case PORTB: if (au8_VALUE==LOW)
 34c:	8b 81       	ldd	r24, Y+3	; 0x03
 34e:	88 23       	and	r24, r24
 350:	a9 f4       	brne	.+42     	; 0x37c <DIO_SetPinValue+0xe8>
						{
							CLR_BIT(PORTB_REG,au8_PIN);
 352:	a8 e3       	ldi	r26, 0x38	; 56
 354:	b0 e0       	ldi	r27, 0x00	; 0
 356:	e8 e3       	ldi	r30, 0x38	; 56
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	48 2f       	mov	r20, r24
 35e:	8a 81       	ldd	r24, Y+2	; 0x02
 360:	28 2f       	mov	r18, r24
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 2e       	mov	r0, r18
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_SetPinValue+0xdc>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	0a 94       	dec	r0
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_SetPinValue+0xd8>
 374:	80 95       	com	r24
 376:	84 23       	and	r24, r20
 378:	8c 93       	st	X, r24
 37a:	76 c0       	rjmp	.+236    	; 0x468 <DIO_SetPinValue+0x1d4>
						}
						else if(au8_VALUE==HIGH)
 37c:	8b 81       	ldd	r24, Y+3	; 0x03
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	09 f0       	breq	.+2      	; 0x384 <DIO_SetPinValue+0xf0>
 382:	72 c0       	rjmp	.+228    	; 0x468 <DIO_SetPinValue+0x1d4>
						{
							SET_BIT(PORTB_REG,au8_PIN);
 384:	a8 e3       	ldi	r26, 0x38	; 56
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	e8 e3       	ldi	r30, 0x38	; 56
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	48 2f       	mov	r20, r24
 390:	8a 81       	ldd	r24, Y+2	; 0x02
 392:	28 2f       	mov	r18, r24
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 2e       	mov	r0, r18
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_SetPinValue+0x10e>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	0a 94       	dec	r0
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_SetPinValue+0x10a>
 3a6:	84 2b       	or	r24, r20
 3a8:	8c 93       	st	X, r24
 3aa:	5e c0       	rjmp	.+188    	; 0x468 <DIO_SetPinValue+0x1d4>
						else
						{
							//do noting
						}
						break;
			case PORTC: if (au8_VALUE==LOW)
 3ac:	8b 81       	ldd	r24, Y+3	; 0x03
 3ae:	88 23       	and	r24, r24
 3b0:	a9 f4       	brne	.+42     	; 0x3dc <DIO_SetPinValue+0x148>
						{
							CLR_BIT(PORTC_REG,au8_PIN);
 3b2:	a5 e3       	ldi	r26, 0x35	; 53
 3b4:	b0 e0       	ldi	r27, 0x00	; 0
 3b6:	e5 e3       	ldi	r30, 0x35	; 53
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	48 2f       	mov	r20, r24
 3be:	8a 81       	ldd	r24, Y+2	; 0x02
 3c0:	28 2f       	mov	r18, r24
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 2e       	mov	r0, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_SetPinValue+0x13c>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	0a 94       	dec	r0
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_SetPinValue+0x138>
 3d4:	80 95       	com	r24
 3d6:	84 23       	and	r24, r20
 3d8:	8c 93       	st	X, r24
 3da:	46 c0       	rjmp	.+140    	; 0x468 <DIO_SetPinValue+0x1d4>
						}
						else if(au8_VALUE==HIGH)
 3dc:	8b 81       	ldd	r24, Y+3	; 0x03
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <DIO_SetPinValue+0x150>
 3e2:	42 c0       	rjmp	.+132    	; 0x468 <DIO_SetPinValue+0x1d4>
						{
							SET_BIT(PORTC_REG,au8_PIN);
 3e4:	a5 e3       	ldi	r26, 0x35	; 53
 3e6:	b0 e0       	ldi	r27, 0x00	; 0
 3e8:	e5 e3       	ldi	r30, 0x35	; 53
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	48 2f       	mov	r20, r24
 3f0:	8a 81       	ldd	r24, Y+2	; 0x02
 3f2:	28 2f       	mov	r18, r24
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 2e       	mov	r0, r18
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <DIO_SetPinValue+0x16e>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_SetPinValue+0x16a>
 406:	84 2b       	or	r24, r20
 408:	8c 93       	st	X, r24
 40a:	2e c0       	rjmp	.+92     	; 0x468 <DIO_SetPinValue+0x1d4>
						else
						{
							//do noting
						}
						break;
			case PORTD: if (au8_VALUE==LOW)
 40c:	8b 81       	ldd	r24, Y+3	; 0x03
 40e:	88 23       	and	r24, r24
 410:	a9 f4       	brne	.+42     	; 0x43c <DIO_SetPinValue+0x1a8>
						{
							CLR_BIT(PORTD_REG,au8_PIN);
 412:	a2 e3       	ldi	r26, 0x32	; 50
 414:	b0 e0       	ldi	r27, 0x00	; 0
 416:	e2 e3       	ldi	r30, 0x32	; 50
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	48 2f       	mov	r20, r24
 41e:	8a 81       	ldd	r24, Y+2	; 0x02
 420:	28 2f       	mov	r18, r24
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 2e       	mov	r0, r18
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_SetPinValue+0x19c>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	0a 94       	dec	r0
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_SetPinValue+0x198>
 434:	80 95       	com	r24
 436:	84 23       	and	r24, r20
 438:	8c 93       	st	X, r24
 43a:	16 c0       	rjmp	.+44     	; 0x468 <DIO_SetPinValue+0x1d4>
						}
						else if(au8_VALUE==HIGH)
 43c:	8b 81       	ldd	r24, Y+3	; 0x03
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	99 f4       	brne	.+38     	; 0x468 <DIO_SetPinValue+0x1d4>
						{
							SET_BIT(PORTD_REG,au8_PIN);
 442:	a2 e3       	ldi	r26, 0x32	; 50
 444:	b0 e0       	ldi	r27, 0x00	; 0
 446:	e2 e3       	ldi	r30, 0x32	; 50
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	48 2f       	mov	r20, r24
 44e:	8a 81       	ldd	r24, Y+2	; 0x02
 450:	28 2f       	mov	r18, r24
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 2e       	mov	r0, r18
 45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_SetPinValue+0x1cc>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	0a 94       	dec	r0
 462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_SetPinValue+0x1c8>
 464:	84 2b       	or	r24, r20
 466:	8c 93       	st	X, r24
						}
						break;
			default://error
				break;
		}//switch
}//function
 468:	0f 90       	pop	r0
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	cf 91       	pop	r28
 474:	df 91       	pop	r29
 476:	08 95       	ret

00000478 <DIO_TogPinValue>:
void DIO_TogPinValue(uint_8 au8_PORT , uint_8 PIN)
{
 478:	df 93       	push	r29
 47a:	cf 93       	push	r28
 47c:	00 d0       	rcall	.+0      	; 0x47e <DIO_TogPinValue+0x6>
 47e:	00 d0       	rcall	.+0      	; 0x480 <DIO_TogPinValue+0x8>
 480:	cd b7       	in	r28, 0x3d	; 61
 482:	de b7       	in	r29, 0x3e	; 62
 484:	89 83       	std	Y+1, r24	; 0x01
 486:	6a 83       	std	Y+2, r22	; 0x02
	switch(au8_PORT)
 488:	89 81       	ldd	r24, Y+1	; 0x01
 48a:	28 2f       	mov	r18, r24
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	3c 83       	std	Y+4, r19	; 0x04
 490:	2b 83       	std	Y+3, r18	; 0x03
 492:	8b 81       	ldd	r24, Y+3	; 0x03
 494:	9c 81       	ldd	r25, Y+4	; 0x04
 496:	81 30       	cpi	r24, 0x01	; 1
 498:	91 05       	cpc	r25, r1
 49a:	49 f1       	breq	.+82     	; 0x4ee <DIO_TogPinValue+0x76>
 49c:	2b 81       	ldd	r18, Y+3	; 0x03
 49e:	3c 81       	ldd	r19, Y+4	; 0x04
 4a0:	22 30       	cpi	r18, 0x02	; 2
 4a2:	31 05       	cpc	r19, r1
 4a4:	2c f4       	brge	.+10     	; 0x4b0 <DIO_TogPinValue+0x38>
 4a6:	8b 81       	ldd	r24, Y+3	; 0x03
 4a8:	9c 81       	ldd	r25, Y+4	; 0x04
 4aa:	00 97       	sbiw	r24, 0x00	; 0
 4ac:	61 f0       	breq	.+24     	; 0x4c6 <DIO_TogPinValue+0x4e>
 4ae:	5a c0       	rjmp	.+180    	; 0x564 <DIO_TogPinValue+0xec>
 4b0:	2b 81       	ldd	r18, Y+3	; 0x03
 4b2:	3c 81       	ldd	r19, Y+4	; 0x04
 4b4:	22 30       	cpi	r18, 0x02	; 2
 4b6:	31 05       	cpc	r19, r1
 4b8:	71 f1       	breq	.+92     	; 0x516 <DIO_TogPinValue+0x9e>
 4ba:	8b 81       	ldd	r24, Y+3	; 0x03
 4bc:	9c 81       	ldd	r25, Y+4	; 0x04
 4be:	83 30       	cpi	r24, 0x03	; 3
 4c0:	91 05       	cpc	r25, r1
 4c2:	e9 f1       	breq	.+122    	; 0x53e <DIO_TogPinValue+0xc6>
 4c4:	4f c0       	rjmp	.+158    	; 0x564 <DIO_TogPinValue+0xec>
	{
		case PORTA: TOG_BIT(PORTA_REG,PIN);break;
 4c6:	ab e3       	ldi	r26, 0x3B	; 59
 4c8:	b0 e0       	ldi	r27, 0x00	; 0
 4ca:	eb e3       	ldi	r30, 0x3B	; 59
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	48 2f       	mov	r20, r24
 4d2:	8a 81       	ldd	r24, Y+2	; 0x02
 4d4:	28 2f       	mov	r18, r24
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 2e       	mov	r0, r18
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <DIO_TogPinValue+0x6c>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	0a 94       	dec	r0
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <DIO_TogPinValue+0x68>
 4e8:	84 27       	eor	r24, r20
 4ea:	8c 93       	st	X, r24
 4ec:	3b c0       	rjmp	.+118    	; 0x564 <DIO_TogPinValue+0xec>
		case PORTB: TOG_BIT(PORTB_REG,PIN);break;
 4ee:	a8 e3       	ldi	r26, 0x38	; 56
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
 4f2:	e8 e3       	ldi	r30, 0x38	; 56
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	48 2f       	mov	r20, r24
 4fa:	8a 81       	ldd	r24, Y+2	; 0x02
 4fc:	28 2f       	mov	r18, r24
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	02 2e       	mov	r0, r18
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_TogPinValue+0x94>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	0a 94       	dec	r0
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_TogPinValue+0x90>
 510:	84 27       	eor	r24, r20
 512:	8c 93       	st	X, r24
 514:	27 c0       	rjmp	.+78     	; 0x564 <DIO_TogPinValue+0xec>
		case PORTC: TOG_BIT(PORTC_REG,PIN);break;
 516:	a5 e3       	ldi	r26, 0x35	; 53
 518:	b0 e0       	ldi	r27, 0x00	; 0
 51a:	e5 e3       	ldi	r30, 0x35	; 53
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	48 2f       	mov	r20, r24
 522:	8a 81       	ldd	r24, Y+2	; 0x02
 524:	28 2f       	mov	r18, r24
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	02 2e       	mov	r0, r18
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_TogPinValue+0xbc>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	0a 94       	dec	r0
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_TogPinValue+0xb8>
 538:	84 27       	eor	r24, r20
 53a:	8c 93       	st	X, r24
 53c:	13 c0       	rjmp	.+38     	; 0x564 <DIO_TogPinValue+0xec>
		case PORTD: TOG_BIT(PORTD_REG,PIN);break;
 53e:	a2 e3       	ldi	r26, 0x32	; 50
 540:	b0 e0       	ldi	r27, 0x00	; 0
 542:	e2 e3       	ldi	r30, 0x32	; 50
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	48 2f       	mov	r20, r24
 54a:	8a 81       	ldd	r24, Y+2	; 0x02
 54c:	28 2f       	mov	r18, r24
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	02 2e       	mov	r0, r18
 556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_TogPinValue+0xe4>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	0a 94       	dec	r0
 55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_TogPinValue+0xe0>
 560:	84 27       	eor	r24, r20
 562:	8c 93       	st	X, r24
		default://error
			break;
	}//switch
}//function
 564:	0f 90       	pop	r0
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	0f 90       	pop	r0
 56c:	cf 91       	pop	r28
 56e:	df 91       	pop	r29
 570:	08 95       	ret

00000572 <DIO_TogPinDirection>:
void DIO_TogPinDirection(uint_8 au8_PORT , uint_8 PIN)
{
 572:	df 93       	push	r29
 574:	cf 93       	push	r28
 576:	00 d0       	rcall	.+0      	; 0x578 <DIO_TogPinDirection+0x6>
 578:	00 d0       	rcall	.+0      	; 0x57a <DIO_TogPinDirection+0x8>
 57a:	cd b7       	in	r28, 0x3d	; 61
 57c:	de b7       	in	r29, 0x3e	; 62
 57e:	89 83       	std	Y+1, r24	; 0x01
 580:	6a 83       	std	Y+2, r22	; 0x02
	switch(au8_PORT)
 582:	89 81       	ldd	r24, Y+1	; 0x01
 584:	28 2f       	mov	r18, r24
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	3c 83       	std	Y+4, r19	; 0x04
 58a:	2b 83       	std	Y+3, r18	; 0x03
 58c:	8b 81       	ldd	r24, Y+3	; 0x03
 58e:	9c 81       	ldd	r25, Y+4	; 0x04
 590:	81 30       	cpi	r24, 0x01	; 1
 592:	91 05       	cpc	r25, r1
 594:	49 f1       	breq	.+82     	; 0x5e8 <DIO_TogPinDirection+0x76>
 596:	2b 81       	ldd	r18, Y+3	; 0x03
 598:	3c 81       	ldd	r19, Y+4	; 0x04
 59a:	22 30       	cpi	r18, 0x02	; 2
 59c:	31 05       	cpc	r19, r1
 59e:	2c f4       	brge	.+10     	; 0x5aa <DIO_TogPinDirection+0x38>
 5a0:	8b 81       	ldd	r24, Y+3	; 0x03
 5a2:	9c 81       	ldd	r25, Y+4	; 0x04
 5a4:	00 97       	sbiw	r24, 0x00	; 0
 5a6:	61 f0       	breq	.+24     	; 0x5c0 <DIO_TogPinDirection+0x4e>
 5a8:	5a c0       	rjmp	.+180    	; 0x65e <DIO_TogPinDirection+0xec>
 5aa:	2b 81       	ldd	r18, Y+3	; 0x03
 5ac:	3c 81       	ldd	r19, Y+4	; 0x04
 5ae:	22 30       	cpi	r18, 0x02	; 2
 5b0:	31 05       	cpc	r19, r1
 5b2:	71 f1       	breq	.+92     	; 0x610 <DIO_TogPinDirection+0x9e>
 5b4:	8b 81       	ldd	r24, Y+3	; 0x03
 5b6:	9c 81       	ldd	r25, Y+4	; 0x04
 5b8:	83 30       	cpi	r24, 0x03	; 3
 5ba:	91 05       	cpc	r25, r1
 5bc:	e9 f1       	breq	.+122    	; 0x638 <DIO_TogPinDirection+0xc6>
 5be:	4f c0       	rjmp	.+158    	; 0x65e <DIO_TogPinDirection+0xec>
	{
		case PORTA: TOG_BIT(DDRA_REG,PIN);break;
 5c0:	aa e3       	ldi	r26, 0x3A	; 58
 5c2:	b0 e0       	ldi	r27, 0x00	; 0
 5c4:	ea e3       	ldi	r30, 0x3A	; 58
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	80 81       	ld	r24, Z
 5ca:	48 2f       	mov	r20, r24
 5cc:	8a 81       	ldd	r24, Y+2	; 0x02
 5ce:	28 2f       	mov	r18, r24
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	02 2e       	mov	r0, r18
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <DIO_TogPinDirection+0x6c>
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	0a 94       	dec	r0
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <DIO_TogPinDirection+0x68>
 5e2:	84 27       	eor	r24, r20
 5e4:	8c 93       	st	X, r24
 5e6:	3b c0       	rjmp	.+118    	; 0x65e <DIO_TogPinDirection+0xec>
		case PORTB: TOG_BIT(DDRB_REG,PIN);break;
 5e8:	a7 e3       	ldi	r26, 0x37	; 55
 5ea:	b0 e0       	ldi	r27, 0x00	; 0
 5ec:	e7 e3       	ldi	r30, 0x37	; 55
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	80 81       	ld	r24, Z
 5f2:	48 2f       	mov	r20, r24
 5f4:	8a 81       	ldd	r24, Y+2	; 0x02
 5f6:	28 2f       	mov	r18, r24
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	02 2e       	mov	r0, r18
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_TogPinDirection+0x94>
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	0a 94       	dec	r0
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_TogPinDirection+0x90>
 60a:	84 27       	eor	r24, r20
 60c:	8c 93       	st	X, r24
 60e:	27 c0       	rjmp	.+78     	; 0x65e <DIO_TogPinDirection+0xec>
		case PORTC: TOG_BIT(DDRC_REG,PIN);break;
 610:	a4 e3       	ldi	r26, 0x34	; 52
 612:	b0 e0       	ldi	r27, 0x00	; 0
 614:	e4 e3       	ldi	r30, 0x34	; 52
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	80 81       	ld	r24, Z
 61a:	48 2f       	mov	r20, r24
 61c:	8a 81       	ldd	r24, Y+2	; 0x02
 61e:	28 2f       	mov	r18, r24
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	02 2e       	mov	r0, r18
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_TogPinDirection+0xbc>
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	0a 94       	dec	r0
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_TogPinDirection+0xb8>
 632:	84 27       	eor	r24, r20
 634:	8c 93       	st	X, r24
 636:	13 c0       	rjmp	.+38     	; 0x65e <DIO_TogPinDirection+0xec>
		case PORTD: TOG_BIT(DDRD_REG,PIN);break;
 638:	a1 e3       	ldi	r26, 0x31	; 49
 63a:	b0 e0       	ldi	r27, 0x00	; 0
 63c:	e1 e3       	ldi	r30, 0x31	; 49
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	80 81       	ld	r24, Z
 642:	48 2f       	mov	r20, r24
 644:	8a 81       	ldd	r24, Y+2	; 0x02
 646:	28 2f       	mov	r18, r24
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	02 2e       	mov	r0, r18
 650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_TogPinDirection+0xe4>
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	0a 94       	dec	r0
 658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_TogPinDirection+0xe0>
 65a:	84 27       	eor	r24, r20
 65c:	8c 93       	st	X, r24
		default://error
			break;
	}//switch
}//function
 65e:	0f 90       	pop	r0
 660:	0f 90       	pop	r0
 662:	0f 90       	pop	r0
 664:	0f 90       	pop	r0
 666:	cf 91       	pop	r28
 668:	df 91       	pop	r29
 66a:	08 95       	ret

0000066c <DIO_Setau8_PORTDirection>:
void DIO_Setau8_PORTDirection(uint_8 au8_PORT , uint_8 DIRECTION)
{
 66c:	df 93       	push	r29
 66e:	cf 93       	push	r28
 670:	00 d0       	rcall	.+0      	; 0x672 <DIO_Setau8_PORTDirection+0x6>
 672:	00 d0       	rcall	.+0      	; 0x674 <DIO_Setau8_PORTDirection+0x8>
 674:	cd b7       	in	r28, 0x3d	; 61
 676:	de b7       	in	r29, 0x3e	; 62
 678:	89 83       	std	Y+1, r24	; 0x01
 67a:	6a 83       	std	Y+2, r22	; 0x02
	switch(au8_PORT)
 67c:	89 81       	ldd	r24, Y+1	; 0x01
 67e:	28 2f       	mov	r18, r24
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	3c 83       	std	Y+4, r19	; 0x04
 684:	2b 83       	std	Y+3, r18	; 0x03
 686:	8b 81       	ldd	r24, Y+3	; 0x03
 688:	9c 81       	ldd	r25, Y+4	; 0x04
 68a:	81 30       	cpi	r24, 0x01	; 1
 68c:	91 05       	cpc	r25, r1
 68e:	d1 f0       	breq	.+52     	; 0x6c4 <DIO_Setau8_PORTDirection+0x58>
 690:	2b 81       	ldd	r18, Y+3	; 0x03
 692:	3c 81       	ldd	r19, Y+4	; 0x04
 694:	22 30       	cpi	r18, 0x02	; 2
 696:	31 05       	cpc	r19, r1
 698:	2c f4       	brge	.+10     	; 0x6a4 <DIO_Setau8_PORTDirection+0x38>
 69a:	8b 81       	ldd	r24, Y+3	; 0x03
 69c:	9c 81       	ldd	r25, Y+4	; 0x04
 69e:	00 97       	sbiw	r24, 0x00	; 0
 6a0:	61 f0       	breq	.+24     	; 0x6ba <DIO_Setau8_PORTDirection+0x4e>
 6a2:	1e c0       	rjmp	.+60     	; 0x6e0 <DIO_Setau8_PORTDirection+0x74>
 6a4:	2b 81       	ldd	r18, Y+3	; 0x03
 6a6:	3c 81       	ldd	r19, Y+4	; 0x04
 6a8:	22 30       	cpi	r18, 0x02	; 2
 6aa:	31 05       	cpc	r19, r1
 6ac:	81 f0       	breq	.+32     	; 0x6ce <DIO_Setau8_PORTDirection+0x62>
 6ae:	8b 81       	ldd	r24, Y+3	; 0x03
 6b0:	9c 81       	ldd	r25, Y+4	; 0x04
 6b2:	83 30       	cpi	r24, 0x03	; 3
 6b4:	91 05       	cpc	r25, r1
 6b6:	81 f0       	breq	.+32     	; 0x6d8 <DIO_Setau8_PORTDirection+0x6c>
 6b8:	13 c0       	rjmp	.+38     	; 0x6e0 <DIO_Setau8_PORTDirection+0x74>
	{
		case PORTA: DDRA_REG=DIRECTION;break;
 6ba:	ea e3       	ldi	r30, 0x3A	; 58
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	8a 81       	ldd	r24, Y+2	; 0x02
 6c0:	80 83       	st	Z, r24
 6c2:	0e c0       	rjmp	.+28     	; 0x6e0 <DIO_Setau8_PORTDirection+0x74>
		case PORTB: DDRB_REG=DIRECTION;break;
 6c4:	e7 e3       	ldi	r30, 0x37	; 55
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ca:	80 83       	st	Z, r24
 6cc:	09 c0       	rjmp	.+18     	; 0x6e0 <DIO_Setau8_PORTDirection+0x74>
		case PORTC: DDRC_REG=DIRECTION;break;
 6ce:	e4 e3       	ldi	r30, 0x34	; 52
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	8a 81       	ldd	r24, Y+2	; 0x02
 6d4:	80 83       	st	Z, r24
 6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <DIO_Setau8_PORTDirection+0x74>
		case PORTD: DDRD_REG=DIRECTION;break;
 6d8:	e1 e3       	ldi	r30, 0x31	; 49
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	8a 81       	ldd	r24, Y+2	; 0x02
 6de:	80 83       	st	Z, r24
		default://error
			break;
	}//switch
}//function
 6e0:	0f 90       	pop	r0
 6e2:	0f 90       	pop	r0
 6e4:	0f 90       	pop	r0
 6e6:	0f 90       	pop	r0
 6e8:	cf 91       	pop	r28
 6ea:	df 91       	pop	r29
 6ec:	08 95       	ret

000006ee <DIO_Setau8_PORTValue>:
void DIO_Setau8_PORTValue(uint_8 au8_PORT , uint_8 VALUE)
{
 6ee:	df 93       	push	r29
 6f0:	cf 93       	push	r28
 6f2:	00 d0       	rcall	.+0      	; 0x6f4 <DIO_Setau8_PORTValue+0x6>
 6f4:	00 d0       	rcall	.+0      	; 0x6f6 <DIO_Setau8_PORTValue+0x8>
 6f6:	cd b7       	in	r28, 0x3d	; 61
 6f8:	de b7       	in	r29, 0x3e	; 62
 6fa:	89 83       	std	Y+1, r24	; 0x01
 6fc:	6a 83       	std	Y+2, r22	; 0x02
	switch(au8_PORT)
 6fe:	89 81       	ldd	r24, Y+1	; 0x01
 700:	28 2f       	mov	r18, r24
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	3c 83       	std	Y+4, r19	; 0x04
 706:	2b 83       	std	Y+3, r18	; 0x03
 708:	8b 81       	ldd	r24, Y+3	; 0x03
 70a:	9c 81       	ldd	r25, Y+4	; 0x04
 70c:	81 30       	cpi	r24, 0x01	; 1
 70e:	91 05       	cpc	r25, r1
 710:	d1 f0       	breq	.+52     	; 0x746 <DIO_Setau8_PORTValue+0x58>
 712:	2b 81       	ldd	r18, Y+3	; 0x03
 714:	3c 81       	ldd	r19, Y+4	; 0x04
 716:	22 30       	cpi	r18, 0x02	; 2
 718:	31 05       	cpc	r19, r1
 71a:	2c f4       	brge	.+10     	; 0x726 <DIO_Setau8_PORTValue+0x38>
 71c:	8b 81       	ldd	r24, Y+3	; 0x03
 71e:	9c 81       	ldd	r25, Y+4	; 0x04
 720:	00 97       	sbiw	r24, 0x00	; 0
 722:	61 f0       	breq	.+24     	; 0x73c <DIO_Setau8_PORTValue+0x4e>
 724:	1e c0       	rjmp	.+60     	; 0x762 <DIO_Setau8_PORTValue+0x74>
 726:	2b 81       	ldd	r18, Y+3	; 0x03
 728:	3c 81       	ldd	r19, Y+4	; 0x04
 72a:	22 30       	cpi	r18, 0x02	; 2
 72c:	31 05       	cpc	r19, r1
 72e:	81 f0       	breq	.+32     	; 0x750 <DIO_Setau8_PORTValue+0x62>
 730:	8b 81       	ldd	r24, Y+3	; 0x03
 732:	9c 81       	ldd	r25, Y+4	; 0x04
 734:	83 30       	cpi	r24, 0x03	; 3
 736:	91 05       	cpc	r25, r1
 738:	81 f0       	breq	.+32     	; 0x75a <DIO_Setau8_PORTValue+0x6c>
 73a:	13 c0       	rjmp	.+38     	; 0x762 <DIO_Setau8_PORTValue+0x74>
	{
		case PORTA: PORTA_REG=VALUE;break;
 73c:	eb e3       	ldi	r30, 0x3B	; 59
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	8a 81       	ldd	r24, Y+2	; 0x02
 742:	80 83       	st	Z, r24
 744:	0e c0       	rjmp	.+28     	; 0x762 <DIO_Setau8_PORTValue+0x74>
		case PORTB: PORTB_REG=VALUE;break;
 746:	e8 e3       	ldi	r30, 0x38	; 56
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	8a 81       	ldd	r24, Y+2	; 0x02
 74c:	80 83       	st	Z, r24
 74e:	09 c0       	rjmp	.+18     	; 0x762 <DIO_Setau8_PORTValue+0x74>
		case PORTC: PORTC_REG=VALUE;break;
 750:	e5 e3       	ldi	r30, 0x35	; 53
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	8a 81       	ldd	r24, Y+2	; 0x02
 756:	80 83       	st	Z, r24
 758:	04 c0       	rjmp	.+8      	; 0x762 <DIO_Setau8_PORTValue+0x74>
		case PORTD: PORTD_REG=VALUE;break;
 75a:	e2 e3       	ldi	r30, 0x32	; 50
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	8a 81       	ldd	r24, Y+2	; 0x02
 760:	80 83       	st	Z, r24
		default://error
			break;
	}//switch
}//function
 762:	0f 90       	pop	r0
 764:	0f 90       	pop	r0
 766:	0f 90       	pop	r0
 768:	0f 90       	pop	r0
 76a:	cf 91       	pop	r28
 76c:	df 91       	pop	r29
 76e:	08 95       	ret

00000770 <DIO_GetPinValue>:
uint_8 DIO_GetPinValue(uint_8 au8_PORT,uint_8 PIN)
{
 770:	df 93       	push	r29
 772:	cf 93       	push	r28
 774:	00 d0       	rcall	.+0      	; 0x776 <DIO_GetPinValue+0x6>
 776:	00 d0       	rcall	.+0      	; 0x778 <DIO_GetPinValue+0x8>
 778:	0f 92       	push	r0
 77a:	cd b7       	in	r28, 0x3d	; 61
 77c:	de b7       	in	r29, 0x3e	; 62
 77e:	8a 83       	std	Y+2, r24	; 0x02
 780:	6b 83       	std	Y+3, r22	; 0x03
	uint_8 PinValue;
	switch(au8_PORT)
 782:	8a 81       	ldd	r24, Y+2	; 0x02
 784:	28 2f       	mov	r18, r24
 786:	30 e0       	ldi	r19, 0x00	; 0
 788:	3d 83       	std	Y+5, r19	; 0x05
 78a:	2c 83       	std	Y+4, r18	; 0x04
 78c:	4c 81       	ldd	r20, Y+4	; 0x04
 78e:	5d 81       	ldd	r21, Y+5	; 0x05
 790:	41 30       	cpi	r20, 0x01	; 1
 792:	51 05       	cpc	r21, r1
 794:	41 f1       	breq	.+80     	; 0x7e6 <DIO_GetPinValue+0x76>
 796:	8c 81       	ldd	r24, Y+4	; 0x04
 798:	9d 81       	ldd	r25, Y+5	; 0x05
 79a:	82 30       	cpi	r24, 0x02	; 2
 79c:	91 05       	cpc	r25, r1
 79e:	34 f4       	brge	.+12     	; 0x7ac <DIO_GetPinValue+0x3c>
 7a0:	2c 81       	ldd	r18, Y+4	; 0x04
 7a2:	3d 81       	ldd	r19, Y+5	; 0x05
 7a4:	21 15       	cp	r18, r1
 7a6:	31 05       	cpc	r19, r1
 7a8:	61 f0       	breq	.+24     	; 0x7c2 <DIO_GetPinValue+0x52>
 7aa:	52 c0       	rjmp	.+164    	; 0x850 <DIO_GetPinValue+0xe0>
 7ac:	4c 81       	ldd	r20, Y+4	; 0x04
 7ae:	5d 81       	ldd	r21, Y+5	; 0x05
 7b0:	42 30       	cpi	r20, 0x02	; 2
 7b2:	51 05       	cpc	r21, r1
 7b4:	51 f1       	breq	.+84     	; 0x80a <DIO_GetPinValue+0x9a>
 7b6:	8c 81       	ldd	r24, Y+4	; 0x04
 7b8:	9d 81       	ldd	r25, Y+5	; 0x05
 7ba:	83 30       	cpi	r24, 0x03	; 3
 7bc:	91 05       	cpc	r25, r1
 7be:	b9 f1       	breq	.+110    	; 0x82e <DIO_GetPinValue+0xbe>
 7c0:	47 c0       	rjmp	.+142    	; 0x850 <DIO_GetPinValue+0xe0>
	{
		case PORTA: PinValue = GET_BIT(PINA_REG,PIN); break;
 7c2:	e9 e3       	ldi	r30, 0x39	; 57
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	80 81       	ld	r24, Z
 7c8:	28 2f       	mov	r18, r24
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	8b 81       	ldd	r24, Y+3	; 0x03
 7ce:	88 2f       	mov	r24, r24
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	a9 01       	movw	r20, r18
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <DIO_GetPinValue+0x6a>
 7d6:	55 95       	asr	r21
 7d8:	47 95       	ror	r20
 7da:	8a 95       	dec	r24
 7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <DIO_GetPinValue+0x66>
 7de:	ca 01       	movw	r24, r20
 7e0:	81 70       	andi	r24, 0x01	; 1
 7e2:	89 83       	std	Y+1, r24	; 0x01
 7e4:	35 c0       	rjmp	.+106    	; 0x850 <DIO_GetPinValue+0xe0>
		case PORTB: PinValue = GET_BIT(PINB_REG,PIN); break;
 7e6:	e6 e3       	ldi	r30, 0x36	; 54
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	80 81       	ld	r24, Z
 7ec:	28 2f       	mov	r18, r24
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	8b 81       	ldd	r24, Y+3	; 0x03
 7f2:	88 2f       	mov	r24, r24
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	a9 01       	movw	r20, r18
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <DIO_GetPinValue+0x8e>
 7fa:	55 95       	asr	r21
 7fc:	47 95       	ror	r20
 7fe:	8a 95       	dec	r24
 800:	e2 f7       	brpl	.-8      	; 0x7fa <DIO_GetPinValue+0x8a>
 802:	ca 01       	movw	r24, r20
 804:	81 70       	andi	r24, 0x01	; 1
 806:	89 83       	std	Y+1, r24	; 0x01
 808:	23 c0       	rjmp	.+70     	; 0x850 <DIO_GetPinValue+0xe0>
		case PORTC: PinValue = GET_BIT(PINC_REG,PIN); break;
 80a:	e3 e3       	ldi	r30, 0x33	; 51
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	80 81       	ld	r24, Z
 810:	28 2f       	mov	r18, r24
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	8b 81       	ldd	r24, Y+3	; 0x03
 816:	88 2f       	mov	r24, r24
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	a9 01       	movw	r20, r18
 81c:	02 c0       	rjmp	.+4      	; 0x822 <DIO_GetPinValue+0xb2>
 81e:	55 95       	asr	r21
 820:	47 95       	ror	r20
 822:	8a 95       	dec	r24
 824:	e2 f7       	brpl	.-8      	; 0x81e <DIO_GetPinValue+0xae>
 826:	ca 01       	movw	r24, r20
 828:	81 70       	andi	r24, 0x01	; 1
 82a:	89 83       	std	Y+1, r24	; 0x01
 82c:	11 c0       	rjmp	.+34     	; 0x850 <DIO_GetPinValue+0xe0>
		case PORTD: PinValue = GET_BIT(PIND_REG,PIN); break;
 82e:	e0 e3       	ldi	r30, 0x30	; 48
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	80 81       	ld	r24, Z
 834:	28 2f       	mov	r18, r24
 836:	30 e0       	ldi	r19, 0x00	; 0
 838:	8b 81       	ldd	r24, Y+3	; 0x03
 83a:	88 2f       	mov	r24, r24
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	a9 01       	movw	r20, r18
 840:	02 c0       	rjmp	.+4      	; 0x846 <DIO_GetPinValue+0xd6>
 842:	55 95       	asr	r21
 844:	47 95       	ror	r20
 846:	8a 95       	dec	r24
 848:	e2 f7       	brpl	.-8      	; 0x842 <DIO_GetPinValue+0xd2>
 84a:	ca 01       	movw	r24, r20
 84c:	81 70       	andi	r24, 0x01	; 1
 84e:	89 83       	std	Y+1, r24	; 0x01
		default://error
			break;
	}//switch
	return PinValue;
 850:	89 81       	ldd	r24, Y+1	; 0x01
}//function
 852:	0f 90       	pop	r0
 854:	0f 90       	pop	r0
 856:	0f 90       	pop	r0
 858:	0f 90       	pop	r0
 85a:	0f 90       	pop	r0
 85c:	cf 91       	pop	r28
 85e:	df 91       	pop	r29
 860:	08 95       	ret

00000862 <DIO_Getau8_PORTValue>:
uint_8 DIO_Getau8_PORTValue(uint_8 au8_PORT)
{
 862:	df 93       	push	r29
 864:	cf 93       	push	r28
 866:	00 d0       	rcall	.+0      	; 0x868 <DIO_Getau8_PORTValue+0x6>
 868:	00 d0       	rcall	.+0      	; 0x86a <DIO_Getau8_PORTValue+0x8>
 86a:	cd b7       	in	r28, 0x3d	; 61
 86c:	de b7       	in	r29, 0x3e	; 62
 86e:	8a 83       	std	Y+2, r24	; 0x02
	uint_8 PinValue;
	switch(au8_PORT)
 870:	8a 81       	ldd	r24, Y+2	; 0x02
 872:	28 2f       	mov	r18, r24
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	3c 83       	std	Y+4, r19	; 0x04
 878:	2b 83       	std	Y+3, r18	; 0x03
 87a:	8b 81       	ldd	r24, Y+3	; 0x03
 87c:	9c 81       	ldd	r25, Y+4	; 0x04
 87e:	81 30       	cpi	r24, 0x01	; 1
 880:	91 05       	cpc	r25, r1
 882:	d1 f0       	breq	.+52     	; 0x8b8 <DIO_Getau8_PORTValue+0x56>
 884:	2b 81       	ldd	r18, Y+3	; 0x03
 886:	3c 81       	ldd	r19, Y+4	; 0x04
 888:	22 30       	cpi	r18, 0x02	; 2
 88a:	31 05       	cpc	r19, r1
 88c:	2c f4       	brge	.+10     	; 0x898 <DIO_Getau8_PORTValue+0x36>
 88e:	8b 81       	ldd	r24, Y+3	; 0x03
 890:	9c 81       	ldd	r25, Y+4	; 0x04
 892:	00 97       	sbiw	r24, 0x00	; 0
 894:	61 f0       	breq	.+24     	; 0x8ae <DIO_Getau8_PORTValue+0x4c>
 896:	1e c0       	rjmp	.+60     	; 0x8d4 <DIO_Getau8_PORTValue+0x72>
 898:	2b 81       	ldd	r18, Y+3	; 0x03
 89a:	3c 81       	ldd	r19, Y+4	; 0x04
 89c:	22 30       	cpi	r18, 0x02	; 2
 89e:	31 05       	cpc	r19, r1
 8a0:	81 f0       	breq	.+32     	; 0x8c2 <DIO_Getau8_PORTValue+0x60>
 8a2:	8b 81       	ldd	r24, Y+3	; 0x03
 8a4:	9c 81       	ldd	r25, Y+4	; 0x04
 8a6:	83 30       	cpi	r24, 0x03	; 3
 8a8:	91 05       	cpc	r25, r1
 8aa:	81 f0       	breq	.+32     	; 0x8cc <DIO_Getau8_PORTValue+0x6a>
 8ac:	13 c0       	rjmp	.+38     	; 0x8d4 <DIO_Getau8_PORTValue+0x72>
	{
		case PORTA: PinValue =*((uint_8*)0x39); break;
 8ae:	e9 e3       	ldi	r30, 0x39	; 57
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	80 81       	ld	r24, Z
 8b4:	89 83       	std	Y+1, r24	; 0x01
 8b6:	0e c0       	rjmp	.+28     	; 0x8d4 <DIO_Getau8_PORTValue+0x72>
		case PORTB: PinValue =*((uint_8*)0x36); break;
 8b8:	e6 e3       	ldi	r30, 0x36	; 54
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	80 81       	ld	r24, Z
 8be:	89 83       	std	Y+1, r24	; 0x01
 8c0:	09 c0       	rjmp	.+18     	; 0x8d4 <DIO_Getau8_PORTValue+0x72>
		case PORTC: PinValue =*((uint_8*)0x33); break;
 8c2:	e3 e3       	ldi	r30, 0x33	; 51
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	80 81       	ld	r24, Z
 8c8:	89 83       	std	Y+1, r24	; 0x01
 8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <DIO_Getau8_PORTValue+0x72>
		case PORTD: PinValue =*((uint_8*)0x30); break;
 8cc:	e0 e3       	ldi	r30, 0x30	; 48
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	80 81       	ld	r24, Z
 8d2:	89 83       	std	Y+1, r24	; 0x01
		default://error
			break;
	}//switch
	return PinValue;
 8d4:	89 81       	ldd	r24, Y+1	; 0x01
}
 8d6:	0f 90       	pop	r0
 8d8:	0f 90       	pop	r0
 8da:	0f 90       	pop	r0
 8dc:	0f 90       	pop	r0
 8de:	cf 91       	pop	r28
 8e0:	df 91       	pop	r29
 8e2:	08 95       	ret

000008e4 <GIE_voidEnable>:
#include "GIE_privet.h"
#include "GIE_interface.h"


void GIE_voidEnable(void)
{
 8e4:	df 93       	push	r29
 8e6:	cf 93       	push	r28
 8e8:	cd b7       	in	r28, 0x3d	; 61
 8ea:	de b7       	in	r29, 0x3e	; 62
	SET_BIT( SREG , SREG_I);
 8ec:	af e5       	ldi	r26, 0x5F	; 95
 8ee:	b0 e0       	ldi	r27, 0x00	; 0
 8f0:	ef e5       	ldi	r30, 0x5F	; 95
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	80 81       	ld	r24, Z
 8f6:	80 68       	ori	r24, 0x80	; 128
 8f8:	8c 93       	st	X, r24
}
 8fa:	cf 91       	pop	r28
 8fc:	df 91       	pop	r29
 8fe:	08 95       	ret

00000900 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
 900:	df 93       	push	r29
 902:	cf 93       	push	r28
 904:	cd b7       	in	r28, 0x3d	; 61
 906:	de b7       	in	r29, 0x3e	; 62
	
	CLR_BIT( SREG , SREG_I);
 908:	af e5       	ldi	r26, 0x5F	; 95
 90a:	b0 e0       	ldi	r27, 0x00	; 0
 90c:	ef e5       	ldi	r30, 0x5F	; 95
 90e:	f0 e0       	ldi	r31, 0x00	; 0
 910:	80 81       	ld	r24, Z
 912:	8f 77       	andi	r24, 0x7F	; 127
 914:	8c 93       	st	X, r24
	
}
 916:	cf 91       	pop	r28
 918:	df 91       	pop	r29
 91a:	08 95       	ret

0000091c <Delay>:

#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "timer0_interface.h"
void Delay(uint_8 delay)
{
 91c:	df 93       	push	r29
 91e:	cf 93       	push	r28
 920:	0f 92       	push	r0
 922:	cd b7       	in	r28, 0x3d	; 61
 924:	de b7       	in	r29, 0x3e	; 62
 926:	89 83       	std	Y+1, r24	; 0x01
	Timer0_delay(delay);
 928:	89 81       	ldd	r24, Y+1	; 0x01
 92a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <Timer0_delay>
}
 92e:	0f 90       	pop	r0
 930:	cf 91       	pop	r28
 932:	df 91       	pop	r29
 934:	08 95       	ret

00000936 <timer_callback>:
uint_32 Ton=0,T=0;

void (*gcallBack)(void)=NULL;

void timer_callback(void(*CallBack)(void))
{
 936:	df 93       	push	r29
 938:	cf 93       	push	r28
 93a:	00 d0       	rcall	.+0      	; 0x93c <timer_callback+0x6>
 93c:	cd b7       	in	r28, 0x3d	; 61
 93e:	de b7       	in	r29, 0x3e	; 62
 940:	9a 83       	std	Y+2, r25	; 0x02
 942:	89 83       	std	Y+1, r24	; 0x01
	gcallBack =CallBack ;
 944:	89 81       	ldd	r24, Y+1	; 0x01
 946:	9a 81       	ldd	r25, Y+2	; 0x02
 948:	90 93 6c 00 	sts	0x006C, r25
 94c:	80 93 6b 00 	sts	0x006B, r24
}
 950:	0f 90       	pop	r0
 952:	0f 90       	pop	r0
 954:	cf 91       	pop	r28
 956:	df 91       	pop	r29
 958:	08 95       	ret

0000095a <Pre_Load_Value>:

void Pre_Load_Value(uint_8 au8_Pre_load_value)
{
 95a:	df 93       	push	r29
 95c:	cf 93       	push	r28
 95e:	0f 92       	push	r0
 960:	cd b7       	in	r28, 0x3d	; 61
 962:	de b7       	in	r29, 0x3e	; 62
 964:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 =au8_Pre_load_value ;
 966:	e2 e5       	ldi	r30, 0x52	; 82
 968:	f0 e0       	ldi	r31, 0x00	; 0
 96a:	89 81       	ldd	r24, Y+1	; 0x01
 96c:	80 83       	st	Z, r24

}
 96e:	0f 90       	pop	r0
 970:	cf 91       	pop	r28
 972:	df 91       	pop	r29
 974:	08 95       	ret

00000976 <Timer0_Voidint>:


void Timer0_Voidint(void)
{
 976:	df 93       	push	r29
 978:	cf 93       	push	r28
 97a:	cd b7       	in	r28, 0x3d	; 61
 97c:	de b7       	in	r29, 0x3e	; 62
	/* TIMER0_SELECT_MODE*/

	#if TIMER0_SELECT_MODE == NORMAL_MODE

	   /*SELECT NORMALMOD (0V)*/
		     CLR_BIT(TCCR0,WGM01);
 97e:	a3 e5       	ldi	r26, 0x53	; 83
 980:	b0 e0       	ldi	r27, 0x00	; 0
 982:	e3 e5       	ldi	r30, 0x53	; 83
 984:	f0 e0       	ldi	r31, 0x00	; 0
 986:	80 81       	ld	r24, Z
 988:	87 7f       	andi	r24, 0xF7	; 247
 98a:	8c 93       	st	X, r24
		     CLR_BIT(TCCR0,WGM00);
 98c:	a3 e5       	ldi	r26, 0x53	; 83
 98e:	b0 e0       	ldi	r27, 0x00	; 0
 990:	e3 e5       	ldi	r30, 0x53	; 83
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	80 81       	ld	r24, Z
 996:	8f 7b       	andi	r24, 0xBF	; 191
 998:	8c 93       	st	X, r24
#elif TIMER0_PRESCALER_SELECTION ==  CLK_SOURCE_256
	     CLR_BIT(TCCR0,CS00);
	     CLR_BIT(TCCR0,CS01);
	     SET_BIT(TCCR0,CS02);
#elif TIMER0_PRESCALER_SELECTION ==  CLK_SOURCE_1024
	     SET_BIT(TCCR0,CS00);
 99a:	a3 e5       	ldi	r26, 0x53	; 83
 99c:	b0 e0       	ldi	r27, 0x00	; 0
 99e:	e3 e5       	ldi	r30, 0x53	; 83
 9a0:	f0 e0       	ldi	r31, 0x00	; 0
 9a2:	80 81       	ld	r24, Z
 9a4:	81 60       	ori	r24, 0x01	; 1
 9a6:	8c 93       	st	X, r24
	     CLR_BIT(TCCR0,CS01);
 9a8:	a3 e5       	ldi	r26, 0x53	; 83
 9aa:	b0 e0       	ldi	r27, 0x00	; 0
 9ac:	e3 e5       	ldi	r30, 0x53	; 83
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	80 81       	ld	r24, Z
 9b2:	8d 7f       	andi	r24, 0xFD	; 253
 9b4:	8c 93       	st	X, r24
	     SET_BIT(TCCR0,CS02);
 9b6:	a3 e5       	ldi	r26, 0x53	; 83
 9b8:	b0 e0       	ldi	r27, 0x00	; 0
 9ba:	e3 e5       	ldi	r30, 0x53	; 83
 9bc:	f0 e0       	ldi	r31, 0x00	; 0
 9be:	80 81       	ld	r24, Z
 9c0:	84 60       	ori	r24, 0x04	; 4
 9c2:	8c 93       	st	X, r24
#endif

	    /*OVER FLOW INTURRPT*/
#if TIMER0_OVF_INTURRPTS == DISABLE
	     CLR_BIT(TIMSK,TOIEO);
 9c4:	a9 e5       	ldi	r26, 0x59	; 89
 9c6:	b0 e0       	ldi	r27, 0x00	; 0
 9c8:	e9 e5       	ldi	r30, 0x59	; 89
 9ca:	f0 e0       	ldi	r31, 0x00	; 0
 9cc:	80 81       	ld	r24, Z
 9ce:	8e 7f       	andi	r24, 0xFE	; 254
 9d0:	8c 93       	st	X, r24
#elif  	 TIMER0_OVF_INTURRPTS == ENABLE
	     SET_BIT(TIMSK,TOIEO);

#endif
}
 9d2:	cf 91       	pop	r28
 9d4:	df 91       	pop	r29
 9d6:	08 95       	ret

000009d8 <Timer0_VoidintDutyCycle>:




void Timer0_VoidintDutyCycle(uint_8 au8_Copy_Duty){
 9d8:	df 93       	push	r29
 9da:	cf 93       	push	r28
 9dc:	0f 92       	push	r0
 9de:	cd b7       	in	r28, 0x3d	; 61
 9e0:	de b7       	in	r29, 0x3e	; 62
 9e2:	89 83       	std	Y+1, r24	; 0x01

	OCR0=au8_Copy_Duty;
 9e4:	ec e5       	ldi	r30, 0x5C	; 92
 9e6:	f0 e0       	ldi	r31, 0x00	; 0
 9e8:	89 81       	ldd	r24, Y+1	; 0x01
 9ea:	80 83       	st	Z, r24
}
 9ec:	0f 90       	pop	r0
 9ee:	cf 91       	pop	r28
 9f0:	df 91       	pop	r29
 9f2:	08 95       	ret

000009f4 <Timer0_delay>:


void Timer0_delay(uint_8 au8_Timeout)
{
 9f4:	df 93       	push	r29
 9f6:	cf 93       	push	r28
 9f8:	00 d0       	rcall	.+0      	; 0x9fa <Timer0_delay+0x6>
 9fa:	cd b7       	in	r28, 0x3d	; 61
 9fc:	de b7       	in	r29, 0x3e	; 62
 9fe:	8a 83       	std	Y+2, r24	; 0x02
	uint_8 au8_counter=0;
 a00:	19 82       	std	Y+1, r1	; 0x01
 a02:	0e c0       	rjmp	.+28     	; 0xa20 <Timer0_delay+0x2c>
    while( GET_BIT(TIFR ,TOV0)==0)
    {
    	SET_BIT(TIFR ,TOV0);
 a04:	a8 e5       	ldi	r26, 0x58	; 88
 a06:	b0 e0       	ldi	r27, 0x00	; 0
 a08:	e8 e5       	ldi	r30, 0x58	; 88
 a0a:	f0 e0       	ldi	r31, 0x00	; 0
 a0c:	80 81       	ld	r24, Z
 a0e:	81 60       	ori	r24, 0x01	; 1
 a10:	8c 93       	st	X, r24
    	au8_counter++;
 a12:	89 81       	ldd	r24, Y+1	; 0x01
 a14:	8f 5f       	subi	r24, 0xFF	; 255
 a16:	89 83       	std	Y+1, r24	; 0x01
         if(au8_counter == au8_Timeout)
 a18:	99 81       	ldd	r25, Y+1	; 0x01
 a1a:	8a 81       	ldd	r24, Y+2	; 0x02
 a1c:	98 17       	cp	r25, r24
 a1e:	49 f0       	breq	.+18     	; 0xa32 <Timer0_delay+0x3e>


void Timer0_delay(uint_8 au8_Timeout)
{
	uint_8 au8_counter=0;
    while( GET_BIT(TIFR ,TOV0)==0)
 a20:	e8 e5       	ldi	r30, 0x58	; 88
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	80 81       	ld	r24, Z
 a26:	88 2f       	mov	r24, r24
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	81 70       	andi	r24, 0x01	; 1
 a2c:	90 70       	andi	r25, 0x00	; 0
 a2e:	00 97       	sbiw	r24, 0x00	; 0
 a30:	49 f3       	breq	.-46     	; 0xa04 <Timer0_delay+0x10>
    	au8_counter++;
         if(au8_counter == au8_Timeout)
        	 break;
    }

}
 a32:	0f 90       	pop	r0
 a34:	0f 90       	pop	r0
 a36:	cf 91       	pop	r28
 a38:	df 91       	pop	r29
 a3a:	08 95       	ret

00000a3c <__vector_11>:


void __vector_11(void) __attribute__((signal));

void __vector_11(void)
{
 a3c:	1f 92       	push	r1
 a3e:	0f 92       	push	r0
 a40:	0f b6       	in	r0, 0x3f	; 63
 a42:	0f 92       	push	r0
 a44:	11 24       	eor	r1, r1
 a46:	2f 93       	push	r18
 a48:	3f 93       	push	r19
 a4a:	4f 93       	push	r20
 a4c:	5f 93       	push	r21
 a4e:	6f 93       	push	r22
 a50:	7f 93       	push	r23
 a52:	8f 93       	push	r24
 a54:	9f 93       	push	r25
 a56:	af 93       	push	r26
 a58:	bf 93       	push	r27
 a5a:	ef 93       	push	r30
 a5c:	ff 93       	push	r31
 a5e:	df 93       	push	r29
 a60:	cf 93       	push	r28
 a62:	cd b7       	in	r28, 0x3d	; 61
 a64:	de b7       	in	r29, 0x3e	; 62
	if (gcallBack!=NULL )
 a66:	80 91 6b 00 	lds	r24, 0x006B
 a6a:	90 91 6c 00 	lds	r25, 0x006C
 a6e:	00 97       	sbiw	r24, 0x00	; 0
 a70:	29 f0       	breq	.+10     	; 0xa7c <__vector_11+0x40>
	{
		gcallBack();
 a72:	e0 91 6b 00 	lds	r30, 0x006B
 a76:	f0 91 6c 00 	lds	r31, 0x006C
 a7a:	09 95       	icall
	}
	else{
		/*do nothing*/
	    }

}
 a7c:	cf 91       	pop	r28
 a7e:	df 91       	pop	r29
 a80:	ff 91       	pop	r31
 a82:	ef 91       	pop	r30
 a84:	bf 91       	pop	r27
 a86:	af 91       	pop	r26
 a88:	9f 91       	pop	r25
 a8a:	8f 91       	pop	r24
 a8c:	7f 91       	pop	r23
 a8e:	6f 91       	pop	r22
 a90:	5f 91       	pop	r21
 a92:	4f 91       	pop	r20
 a94:	3f 91       	pop	r19
 a96:	2f 91       	pop	r18
 a98:	0f 90       	pop	r0
 a9a:	0f be       	out	0x3f, r0	; 63
 a9c:	0f 90       	pop	r0
 a9e:	1f 90       	pop	r1
 aa0:	18 95       	reti

00000aa2 <__vector_10>:


void __vector_10(void) __attribute__((signal));

void __vector_10(void)
{
 aa2:	1f 92       	push	r1
 aa4:	0f 92       	push	r0
 aa6:	0f b6       	in	r0, 0x3f	; 63
 aa8:	0f 92       	push	r0
 aaa:	11 24       	eor	r1, r1
 aac:	2f 93       	push	r18
 aae:	3f 93       	push	r19
 ab0:	4f 93       	push	r20
 ab2:	5f 93       	push	r21
 ab4:	6f 93       	push	r22
 ab6:	7f 93       	push	r23
 ab8:	8f 93       	push	r24
 aba:	9f 93       	push	r25
 abc:	af 93       	push	r26
 abe:	bf 93       	push	r27
 ac0:	ef 93       	push	r30
 ac2:	ff 93       	push	r31
 ac4:	df 93       	push	r29
 ac6:	cf 93       	push	r28
 ac8:	cd b7       	in	r28, 0x3d	; 61
 aca:	de b7       	in	r29, 0x3e	; 62
	static uint_8 counter=0;
	counter++;
 acc:	80 91 6d 00 	lds	r24, 0x006D
 ad0:	8f 5f       	subi	r24, 0xFF	; 255
 ad2:	80 93 6d 00 	sts	0x006D, r24

if(counter==123)
 ad6:	80 91 6d 00 	lds	r24, 0x006D
 ada:	8b 37       	cpi	r24, 0x7B	; 123
 adc:	51 f4       	brne	.+20     	; 0xaf2 <__vector_10+0x50>
{
	TCNT0=TIMER0_PreLoad;
 ade:	e2 e5       	ldi	r30, 0x52	; 82
 ae0:	f0 e0       	ldi	r31, 0x00	; 0
 ae2:	81 e6       	ldi	r24, 0x61	; 97
 ae4:	80 83       	st	Z, r24
	DIO_TogPinValue(PORTB, PIN0);
 ae6:	81 e0       	ldi	r24, 0x01	; 1
 ae8:	60 e0       	ldi	r22, 0x00	; 0
 aea:	0e 94 3c 02 	call	0x478	; 0x478 <DIO_TogPinValue>
	counter=0;
 aee:	10 92 6d 00 	sts	0x006D, r1
}


}
 af2:	cf 91       	pop	r28
 af4:	df 91       	pop	r29
 af6:	ff 91       	pop	r31
 af8:	ef 91       	pop	r30
 afa:	bf 91       	pop	r27
 afc:	af 91       	pop	r26
 afe:	9f 91       	pop	r25
 b00:	8f 91       	pop	r24
 b02:	7f 91       	pop	r23
 b04:	6f 91       	pop	r22
 b06:	5f 91       	pop	r21
 b08:	4f 91       	pop	r20
 b0a:	3f 91       	pop	r19
 b0c:	2f 91       	pop	r18
 b0e:	0f 90       	pop	r0
 b10:	0f be       	out	0x3f, r0	; 63
 b12:	0f 90       	pop	r0
 b14:	1f 90       	pop	r1
 b16:	18 95       	reti

00000b18 <_exit>:
 b18:	f8 94       	cli

00000b1a <__stop_program>:
 b1a:	ff cf       	rjmp	.-2      	; 0xb1a <__stop_program>
